* lähteet
** päälähteet
*** historialliset

@book{Liang:1999:JNI:520155,
 author = {Liang, Sheng},
 title = {Java Native Interface: Programmer's Guide and Reference},
 year = {1999},
 isbn = {0201325772},
 edition = {1st},
 publisher = {Addison-Wesley Longman Publishing Co., Inc.},
 address = {Boston, MA, USA},
}

- s.28 getStringCritical: GC off -supported in Android?
- 72: encouraged to use PushLocalFrame/PopLocalFrame
- 89 + 93->: threading (check ndk docs)
  - 97: tärkeä! thread model native vs. java must be the same
- 109: wrappers, architecture!
  - 113: shared stubs
  - 123: peer classes, check NDK impl.
- 131: traps & pitfalls
- !145--> design motivations!
  - binary compatibility !



@article {SPE:SPE4380010203,
  author =       {Knuth, Donald E.},
  title =        {An empirical study of FORTRAN programs},
  journal =      {Software: Practice and Experience},
  volume =       1,
  number =       2,
  publisher =    {John Wiley & Sons, Ltd.},
  issn =         {1097-024X},
  url =          {http://dx.doi.org/10.1002/spe.4380010203},
  doi =          {10.1002/spe.4380010203},
  pages =        {105--133},
  keywords =     {FORTRAN, Optimization, Efficiency, Compiler},
  year =         1971,
  abstract =     {A sample of programs, written in FORTRAN by a wide
                  variety of people for a wide variety of
                  applications, was chosen "at random" in an attempt
                  to discover quantitatively "what programmers really
                  do". Statistical results of this survey are
                  presented here, together with some of their apparent
                  implications for future work in compiler design. The
                  principal conclusion which may be drawn is the
                  importance of a program "profile", namely a table of
                  frequency counts which record how often each
                  statement is performed in a typical run; there are
                  strong indications that profile-keeping should
                  become a standard practice in all computer systems,
                  for casual users as well as system programmers. This
                  paper is the report of a three month study
                  undertaken by the author and about a dozen students
                  and representatives of the software industry during
                  the summer of 1970. It is hoped that a reader who
                  studies this report will obtain a fairly clear
                  conception of how FORTRAN is being used, and what
                  compilers can do about it.},
  file =         {knuth-fortran.pdf}
}

- profilointi (käsitteen esittely: s. 113)
- huom! kustannusarviot /arvioita/, ei mittauksia
- jump tracing? gaines [13]
- p. 128 perusläppää programmer vs. machine time (classic)


@book{Bentley:1982:WEP:539147,
 author = {Bentley, Jon Louis},
 title = {Writing efficient programs},
 year = 1982,
 isbn = {0-13-970251-2},
 publisher = {Prentice-Hall, Inc.},
 address = {Upper Saddle River, NJ, USA},
}

- Call Number:	 Hs 004.04 Bentley
- käytännön periaatteita, ei niin oleellinen

*** automaattinen jni

@inproceedings{Wang:2011:MAC:2038698.2038704,
 author = {Wang, Chih-Sheng and Perez, Guillermo and Chung,
 Yeh-Ching and Hsu, Wei-Chung and Shih, Wei-Kuan and
 Hsu, Hong-Rong},
 title = {A method-based ahead-of-time compiler for android applications},
 booktitle = {Proceedings of the 14th international conference on
 Compilers, architectures and synthesis for embedded
 systems},
 series = {CASES '11},
 year = 2011,
 isbn = {978-1-4503-0713-0},
 location = {Taipei, Taiwan},
 pages = {15--24},
 numpages = 10,
 url = {http://doi.acm.org/10.1145/2038698.2038704},
 doi = {10.1145/2038698.2038704},
 acmid = 2038704,
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {ahead-of-time compiler, android, dalvik bytecode,
 just-in-time compiler, reverse engineering, static
 profiling},
 file = {p15-wang.pdf}
} 

Loistava artikkeli. 

*idea* käytä vastaavaa staattista analyysiä vähentämään native ->
dvm-kutsuja? (siirrä dvm-osapuoli myös natiiviksi?)

- static profiling, aot (aheaod-of-time) vs jit
- problems
 - high jni overhed
 - taken into account in the profiling
 - type information loss
- tools
 - benchmark references
 - google traceview! (runs code once, combine with monkey?)
 - find out about real dynamic profiling
 - smali (dex disassembler)
- differences btw java & c, bridge 
- optimisation tricks
 - avoid calling native code through jni
 - inlining (lähde 20)
 - native code runs in vm context ??
 - aot resolution (constant pool)
 - caching
 - method cloning
- testituloksia
 - string = expensive
 - expensive copying operators

@inproceedings{Stepanian:2005:IJN:1064979.1064997,
 author = {Stepanian, Levon and Brown, Angela Demke and Kielstra, Allan and Koblents, Gita and Stoodley, Kevin},
 title = {Inlining java native calls at runtime},
 booktitle = {Proceedings of the 1st ACM/USENIX international conference on Virtual execution environments},
 series = {VEE '05},
 year = {2005},
 isbn = {1-59593-047-7},
 location = {Chicago, IL, USA},
 pages = {121--131},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/1064979.1064997},
 doi = {10.1145/1064979.1064997},
 acmid = {1064997},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {JIT compilation, JNI, Java, inlining, native code},
 file = {p121-stepanian.pdf}
} 

*** suorituskyky

@book{HELKA:682673,
 author = {Smith, Connie U.},
 title = {Performance engineering of software systems /},
 isbn = {0-201-53769-9},
 address = {Reading (MA) :},
 publisher = {Addison-Wesley,},
 year = {1990.},
 bibdate = {20120402220445}
}

- Hs 004.04 Smith
- vertaa myöhäisempään "painokseen"

*** profilointi, työkalut

@article{Hauswirth:2004:VPU:1035292.1028998,
 author = {Hauswirth, Matthias and Sweeney, Peter F. and Diwan,
 Amer and Hind, Michael},
 title = {Vertical profiling: understanding the behavior of object-oriented applications},
 journal = {SIGPLAN Not.},
 issue_date = {October 2004},
 volume = 39,
 number = 10,
 month = oct,
 year = 2004,
 issn = {0362-1340},
 pages = {251--269},
 numpages = 19,
 url = {http://doi.acm.org/10.1145/1035292.1028998},
 doi = {10.1145/1035292.1028998},
 acmid = 1028998,
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {hardware performance monitors, perturbation,
 software performance monitors, vertical profiling,
 whole-system analysis},
 file = {p251-hauswirth.pdf}
}
@inproceedings{Hauswirth:2004:VPU:1028976.1028998,
 author = {Hauswirth, Matthias and Sweeney, Peter F. and Diwan,
 Amer and Hind, Michael},
 title = {Vertical profiling: understanding the behavior of object-oriented applications},
 booktitle = {Proceedings of the 19th annual ACM SIGPLAN
 conference on Object-oriented programming, systems,
 languages, and applications},
 series = {OOPSLA '04},
 year = 2004,
 isbn = {1-58113-831-8},
 location = {Vancouver, BC, Canada},
 pages = {251--269},
 numpages = 19,
 url = {http://doi.acm.org/10.1145/1028976.1028998},
 doi = {10.1145/1028976.1028998},
 acmid = 1028998,
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {hardware performance monitors, perturbation,
 software performance monitors, vertical profiling,
 whole-system analysis},
 file = {p251-hauswirth.pdf}
}

@article{Mytkowicz:2010:EAJ:1809028.1806618,
 author = {Mytkowicz, Todd and Diwan, Amer and Hauswirth,
 Matthias and Sweeney, Peter F.},
 title = {Evaluating the accuracy of Java profilers},
 journal = {SIGPLAN Not.},
 issue_date = {June 2010},
 volume = 45,
 number = 6,
 month = jun,
 year = 2010,
 issn = {0362-1340},
 pages = {187--197},
 numpages = 11,
 url = {http://doi.acm.org/10.1145/1809028.1806618},
 doi = {10.1145/1809028.1806618},
 acmid = 1806618,
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {bias, observer effect, profiling},
}

@TECHREPORT{Appel88profilingin,
    author = {Andrew Appel and Bruce F. Duba and David B. Macqueen and Andrew P. Tolmach},
    title = {Profiling in the Presence of Optimization and Garbage Collection},
    institution = {},
    year = {1988},
    file = {10.1.1.51.7366.pdf}
}

- Erittäin hyvää perustietoa profiloinnista
  - interrupt-driven
  - call counting
- ei instituutiota?

@MISC{Graham82gprof:a,
 author = {Susan L. Graham and Peter B. Kessler and Marshall
 K. McKusick},
 title = {gprof: a Call Graph Execution Profiler},
 year = 1982,
 file = {graham-profiling-82.pdf},
}
           
*** pelit
@article{Phelps:2004:FGM:971564.971592,
 author = {Phelps, Andrew M. and Parks, David M.},
 title = {Fun and Games: Multi-Language Development},
 journal = {Queue},
 issue_date = {February 2004},
 volume = {1},
 number = {10},
 month = feb,
 year = {2004},
 issn = {1542-7730},
 pages = {46--56},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/971564.971592},
 doi = {10.1145/971564.971592},
 acmid = {971592},
 publisher = {ACM},
 address = {New York, NY, USA},
 file = {phelps.pdf}
} 

** ehkä päälähteet

@article{Nair:2011:EHN:1952522.1952525,
 author = {Nair, Ajay and Shankar, Karthik and Lysecky, Roman},
 title = {Efficient hardware-based nonintrusive dynamic application profiling},
 journal = {ACM Trans. Embed. Comput. Syst.},
 issue_date = {April 2011},
 volume = 10,
 number = 3,
 month = may,
 year = 2011,
 issn = {1539-9087},
 pages = {32:1--32:22},
 articleno = 32,
 numpages = 22,
 url = {http://doi.acm.org/10.1145/1952522.1952525},
 doi = {10.1145/1952522.1952525},
 acmid = 1952525,
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Profiling, critical kernels, dynamic
 hardware/software partitioning, dynamic
 optimization, embedded systems, nonintrusive
 profiling},
 file = {a32-nair.pdf}
} 

- peruslähteitä profilointiin?
- tosin aika h/w, embedded-focus
- itse tutkimus ei sovellu, mutta lähdelista voi olla hyvä

@INPROCEEDINGS{Nethercote03valgrind:a,
    author = {Nicholas Nethercote and Julian Seward},
    title = {Valgrind: A program supervision framework},
    booktitle = {In Third Workshop on Runtime Verification (RV'03},
    year = {2003},
    file = {valgrind2003.ps}
}

@inproceedings{Absar:2011:EPA:2093157.2093175,
 author = {Absar, Javed and Shekhar, Deepak},
 title = {Eliminating partially-redundant array-bounds check in the Android Dalvik JIT compiler},
 booktitle = {Proceedings of the 9th International Conference on
 Principles and Practice of Programming in Java},
 series = {PPPJ '11},
 year = 2011,
 isbn = {978-1-4503-0935-6},
 location = {Kongens Lyngby, Denmark},
 pages = {121--128},
 numpages = 8,
 url = {http://doi.acm.org/10.1145/2093157.2093175},
 doi = {10.1145/2093157.2093175},
 acmid = 2093175,
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Java, array bounds check optimization, compilation,
 just-in-time, optimization, performance,
 verification},
 file = {p121-absar.pdf},
} 

- perusläppää androidista
- dalvikista ja jitistä
- muuten ok

@inproceedings{Hirzel:2007:JGJ:1297027.1297030,
 author = {Hirzel, Martin and Grimm, Robert},
 title = {Jeannie: granting java native interface developers their wishes},
 booktitle = {Proceedings of the 22nd annual ACM SIGPLAN
 conference on Object-oriented programming systems
 and applications},
 series = {OOPSLA '07},
 year = 2007,
 isbn = {978-1-59593-786-5},
 location = {Montreal, Quebec, Canada},
 pages = {19--38},
 numpages = 20,
 url = {http://doi.acm.org/10.1145/1297027.1297030},
 doi = {10.1145/1297027.1297030},
 acmid = 1297030,
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {C, JNI, foreign function interface, java, modular
 syntax, programming language composition, rats!,
 xtc},
}
@article{Hirzel:2007:JGJ:1297105.1297030,
 author = {Hirzel, Martin and Grimm, Robert},
 title = {Jeannie: granting java native interface developers their wishes},
 journal = {SIGPLAN Not.},
 issue_date = {October 2007},
 volume = 42,
 number = 10,
 month = oct,
 year = 2007,
 issn = {0362-1340},
 pages = {19--38},
 numpages = 20,
 url = {http://doi.acm.org/10.1145/1297105.1297030},
 doi = {10.1145/1297105.1297030},
 acmid = 1297030,
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {C, JNI, foreign function interface, java, modular
 syntax, programming language composition, rats!,
 xtc},
 file = {p19-hirzel.pdf},
}

- jni peruslähde
*** lainaukset
    Of course, JNI itself represents only one point in the
    design space of foreign function interfaces (FFIs). As dis-
    cussed in detail in [46], FFIs provide both mechanism and
    policy for bridging between a higher-level language and
    C. The mechanism typically entails glue code to convert
    between the different data representations and calling con-
    ventions. For example, like JNI, the FFIs for O'Caml [37]
    and SML/NJ [33] as well as the Swig FFI generator for
    scripting languages [7] rely on glue code written in C.
    However, the FFI for the Scheme-based esh shell [47], the
    Haskell FFI [17], NLFFI for SML/NJ [10], and Charon for
    Moby [21] extend the higher-level language so that glue
    code can be written in the higher-level language.

    The policy determines how to abstract C's low-level data structures
    and functions in the higher-level language. For most FFIs, this
    policy is fixed. For example, JNI enforces an object-oriented view
    of C code and data. However, FIG

** rajallisesti hyödynnettävissä, tueksi

@inproceedings{Pathak:2012:ESI:2168836.2168841,
 author = {Pathak, Abhinav and Hu, Y. Charlie and Zhang, Ming},
 title = {Where is the energy spent inside my app?: fine grained energy accounting on smartphones with Eprof},
 booktitle = {Proceedings of the 7th ACM european conference on
 Computer Systems},
 series = {EuroSys '12},
 year = 2012,
 isbn = {978-1-4503-1223-3},
 location = {Bern, Switzerland},
 pages = {29--42},
 numpages = 14,
 url = {http://doi.acm.org/10.1145/2168836.2168841},
 doi = {10.1145/2168836.2168841},
 acmid = 2168841,
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Eprof, energy, mobile, smartphones},
 file = {p29-pathak.pdf},
}

- hyvin kirjoitettu, raikas!

@inproceedings{Siefers:2010:RTN:1866307.1866331,
 author = {Siefers, Joseph and Tan, Gang and Morrisett, Greg},
 title = {Robusta: taming the native beast of the JVM},
 booktitle = {Proceedings of the 17th ACM conference on Computer and communications security},
 series = {CCS '10},
 year = {2010},
 isbn = {978-1-4503-0245-6},
 location = {Chicago, Illinois, USA},
 pages = {201--211},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/1866307.1866331},
 doi = {10.1145/1866307.1866331},
 acmid = {1866331},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {JNI, JVM, SFI, sandboxing},
 file = {p201-siefers.pdf}
} 

- p.201: Sun's JDK 1.6 contains over 800,000 lines of C/C++ code
(compared to around two million lines of Java code).


@inproceedings{Reppy:2006:AFG:1173706.1173714,
 author = {Reppy, John and Song, Chunyan},
 title = {Application-specific foreign-interface generation},
 booktitle = {Proceedings of the 5th international conference on
 Generative programming and component engineering},
 series = {GPCE '06},
 year = 2006,
 isbn = {1-59593-237-2},
 location = {Portland, Oregon, USA},
 pages = {49--58},
 numpages = 10,
 url = {http://doi.acm.org/10.1145/1173706.1173714},
 doi = {10.1145/1173706.1173714},
 acmid = 1173714,
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {foreign-interface generation, term rewriting},
 file = {p49-reppy.pdf}
}

- alussa on hyvää "teoreettista" yleiserittelyä ffi:stä


@article{Chiba:2008:JHP:1344834.1344880,
 author = {Chiba, Yuji},
 title = {Java heap protection for debugging native methods},
 journal = {Sci. Comput. Program.},
 issue_date = {February, 2008},
 volume = {70},
 number = {2-3},
 month = feb,
 year = {2008},
 issn = {0167-6423},
 pages = {149--167},
 numpages = {19},
 url = {http://dx.doi.org/10.1016/j.scico.2007.07.004},
 doi = {10.1016/j.scico.2007.07.004},
 acmid = {1344880},
 publisher = {Elsevier North-Holland, Inc.},
 address = {Amsterdam, The Netherlands, The Netherlands},
 keywords = {Debugging, Java, Memory protection, Protection domain},
}
@article{Chiba2008149,
 title = "Java heap protection for debugging native methods",
 journal = "Science of Computer Programming",
 volume = 70,
 number = "2-3??",
 pages = "149 - 167",
 year = 2008,
 note = "<ce:title>Special Issue on Principles and Practices
 of Programming in Java (PPPJ 2006)</ce:title>",
 issn = "0167-6423",
 doi = "10.1016/j.scico.2007.07.004",
 url =
 "http://www.sciencedirect.com/science/article/pii/S0167642307001712",
 author = "Yuji Chiba",
 keywords = "Java",
 keywords = "Memory protection",
 keywords = "Protection domain",
 keywords = "Debugging", file = {1-s2.0-S0167642307001712-main.pdf}
}


@article{Shi:2008:VMS:1328195.1328197,
 author = {Shi, Yunhe and Casey, Kevin and Ertl, M. Anton and
 Gregg, David},
 title = {Virtual machine showdown: Stack versus registers},
 journal = {ACM Trans. Archit. Code Optim.},
 issue_date = {January 2008},
 volume = 4,
 number = 4,
 month = jan,
 year = 2008,
 issn = {1544-3566},
 pages = {2:1--2:36},
 articleno = 2,
 numpages = 36,
 url = {http://doi.acm.org/10.1145/1328195.1328197},
 doi = {10.1145/1328195.1328197},
 acmid = 1328197,
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Interpreter, register architecture, stack
 architecture, virtual machine},
 file = {a21-shi.pdf},
} 

@article{Prechelt:1999:TOC:317665.317683,
 author = {Prechelt, Lutz},
 title = {Technical opinion: comparing Java vs. C/C++ efficiency differences to interpersonal differences},
 journal = {Commun. ACM},
 issue_date = {Oct. 1999},
 volume = 42,
 number = 10,
 month = oct,
 year = 1999,
 issn = {0001-0782},
 pages = {109--112},
 numpages = 4,
 url = {http://doi.acm.org/10.1145/317665.317683},
 doi = {10.1145/317665.317683},
 acmid = 317683,
 publisher = {ACM},
 address = {New York, NY, USA},
 file = {p109-prechelt.pdf},
}

- Anekdoottimainen tutkimus, tehokkuus: C vs Java

@inproceedings{Hazelwood:2006:DBI:1176760.1176793,
 author = {Hazelwood, Kim and Klauser, Artur},
 title = {A dynamic binary instrumentation engine for the ARM architecture},
 booktitle = {Proceedings of the 2006 international conference on
 Compilers, architecture and synthesis for embedded
 systems},
 series = {CASES '06},
 year = 2006,
 isbn = {1-59593-543-6},
 location = {Seoul, Korea},
 pages = {261--270},
 numpages = 10,
 url = {http://doi.acm.org/10.1145/1176760.1176793},
 doi = {10.1145/1176760.1176793},
 acmid = 1176793,
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {binary instrumentation, dynamic translation,
 embedded architectures, pin},
 file = {p261-hazelwood.pdf}
}

- ARM-arkkitehtuuri.

@INPROCEEDINGS{824367, 
author={Radhakrishnan, R. and Vijaykrishnan, N. and John, L.K. and Sivasubramaniam, A.}, 
booktitle={High-Performance Computer Architecture, 2000. HPCA-6. Proceedings. Sixth International Symposium on},
 title={Architectural issues in Java runtime systems}, 
year={2000}, 
month={}, 
volume={}, 
number={}, 
pages={387 -398}, 
abstract={ The Java Virtual Machine (JVM) is the cornerstone of Java
                  technology, and its efficiency in executing portable
                  Java bytecodes is crucial for the success of this
                  technology. Interpretation, just-in-time (JIT)
                  compilation and hardware realization are well-known
                  solutions for JVM, and previous research has
                  proposed optimizations for each of these
                  techniques. However, each technique has its pros and
                  cons and may not be uniformly attractive for all
                  hardware platforms. Instead, an understanding of the
                  architectural implications of JVM implementations
                  with real applications can be crucial to the
                  development of enabling technologies for efficient
                  Java runtime system development on a wide range of
                  platforms (from resource-rich servers to
                  resource-constrained hand-held/embedded
                  systems). Towards this goal, this paper examines
                  architectural issues, from both the hardware and JVM
                  implementation perspectives. It specifically
                  explores the potential of a smart JIT compiler
                  strategy that can dynamically interpret or compile
                  based on associated costs, investigates the CPU and
                  cache architectural support that would benefit JVM
                  implementations, and examines the synchronization
                  support for enhancing performance, using
                  applications from the SpecJVM98 benchmarks}, 
keywords={CPU architectural support;Java Virtual Machine;Java runtime
                  systems;SpecJVM98 benchmarks;cache architectural
                  support;computer
                  architecture;costs;efficiency;embedded
                  systems;enabling technologies;hand-held
                  systems;hardware
                  realization;interpretation;just-in-time
                  compilation;performance enhancement;portable Java
                  bytecodes;resource-constrained systems;resource-rich
                  servers;smart JIT compiler strategy;synchronization
                  support;Java;cache storage;computer
                  architecture;program compilers;program
                  interpreters;synchronisation;virtual machines;}, 
doi={10.1109/HPCA.2000.824367}, 
file = {00824367.pdf},
ISSN={},}

- Perustaustaa Javan suorituskyvystä
- nykymittauksia?

*** portability

@article{Cusumano:1999:NLC:317665.317678,
 author = {Cusumano, Michael A. and Yoffie, David B.},
 title = {What Netscape learned from cross-platform software development},
 journal = {Commun. ACM},
 issue_date = {Oct. 1999},
 volume = 42,
 number = 10,
 month = oct,
 year = 1999,
 issn = {0001-0782},
 pages = {72--78},
 numpages = 7,
 url = {http://doi.acm.org/10.1145/317665.317678},
 doi = {10.1145/317665.317678},
 file = {p72-cusumano.pdf},
 acmid = 317678,
 publisher = {ACM},
 address = {New York, NY, USA},
}

- Käytännön kokemuksia cross-platform-kehityksestä + varhaisesta javasta
  - ei JNI-asiaa

*** jni-bugit

@inproceedings{Li:2011:QFM:2093157.2093159,
 author = {Li, Du and Srisa-an, Witawas},
 title = {Quarantine: a framework to mitigate memory errors in JNI applications},
 booktitle = {Proceedings of the 9th International Conference on
 Principles and Practice of Programming in Java},
 series = {PPPJ '11},
 year = 2011,
 isbn = {978-1-4503-0935-6},
 location = {Kongens Lyngby, Denmark},
 pages = {1--10},
 numpages = 10,
 url = {http://doi.acm.org/10.1145/2093157.2093159},
 doi = {10.1145/2093157.2093159},
 acmid = 2093159,
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {JNI, Java, heap protection, virtual machine},
 file = {p1-li.pdf}
} 

- bugien luokittelua, hyvä!


* tiedekirjastossa

@article{DBLP:journals/joop/Koenig97,
 author = {Andrew Koenig},
 title = {The Importance - and Hazards - of Performance Measurement},
 journal = {JOOP},
 volume = 9,
 number = 8,
 year = 1997,
 pages = {58-60},
 bibsource = {DBLP, http://dblp.uni-trier.de}
}

* hanki

Pelit:
http://www.scopus.com/record/display.url?eid=2-s2.0-2442591498&origin=inward&txGid=yut9Ys1m3XzYeci6W17UKbE%3a1#

A. Shaw, Reasoning about Time in Higher Level Language
Software,o IEEE Trans. Software Eng., vol. 15, no. 7, pp. 875-889,
July 1989.

Chapter in Book: Origins of Performance Engineering: Highlights and
Outstanding Problems, in Performance Engineering: State of the Art and
Current Trends, Springer-Verlag, 2001.

Software Performance and Scalability: A Quantitative Approach (Quantitative Software Engineering Series) [Hardcover]
Henry H. Liu

- ei kirjastossa

@book{glass1998software,
 title = {Software runaways: Lessons Learned from Massive Sotftware Project Failures},
 author = {Glass, Robert L.},
 isbn = 9780136734437,
 lccn = 97029566,
 url = {http://books.google.fi/books?id=w6ZQAAAAMAAJ},
 year = 1998,
 publisher = {Prentice Hall PTR}
}

- Ei löydy kirjastosta.

@book{noble2001small,
 title = {Small memory software: patterns for systems with limited memory},
 author = {Noble, J. and Weir, C.},
 isbn = 9780201596076,
 lccn = 00061846,
 series = {Software patterns series},
 url = {http://books.google.fi/books?id=Cd9QAAAAMAAJ},
 year = 2001,
 publisher = {Addison-Wesley}
}

- Ei löydy HY kirjastosta
 
* arvioi
http://www.cse.wustl.edu/~jain/cse567-06/ftp/sw_monitors1/index.html

** ffi

@inproceedings{moby-interop-framework,
  author = {Kathleen Fisher and Riccardo Pucella and John Reppy},
  title = {A framework for interoperability},
  booktitle = {Proceedings of the First International
					 Workshop on Multi-Language Infrastructure
					 and Interoperability (BABEL'01)},
  series = {Electronic Notes in Theoretical Computer Science},
  volume = {59},
  issue = {1},
  publisher = {Elsevier Science Publishers},
  address = {New York, NY},
  editor = {Nick Benton and Andrew Kennedy},
  year = {2001},
  month = sep,
  pdf = {2001/babel-interop.pdf},
  abstract = {
    Practical implementations of high-level languages must provide access to libraries and system
    services that have APIs specified in a low-level language (usually C).  An important characteristic
    of such mechanisms is the foreign-interface policy that defines how to bridge the semantic gap
    between the high-level language and C. For example, IDL-based tools generate code to marshal
    data into and out of the high-level representation according to user annotations. The design
    space of foreign-interface policies is large and there are pros and cons to each approach. Rather
    than commit to a particular policy, we choose to focus on the problem of supporting a gamut of
    interoperability policies. In this paper, we describe a framework for language interoperability
    that is expressive enough to support very efficient implementations of a wide range of different
    foreign-interface policies. We describe two tools that implement substantially different policies
    on top of our framework and present benchmarks that demonstrate their efficiency.
  },
  topic = {moby,interop},
  file = {babel-interop.pdf}
}

** jni

@incollection {springerlink:10.1007/3-540-45591-4_74,
   author = {Murray, Paul and Smith, Todd and Srinivas, Suresh and Jacob, Matthias},
   affiliation = {Silicon Graphics, Inc. Mountain View CA},
   title = {Performance Issues for Multi-language Java Applications},
   booktitle = {Parallel and Distributed Processing},
   series = {Lecture Notes in Computer Science},
   editor = {Rolim, José},
   publisher = {Springer Berlin / Heidelberg},
   isbn = {978-3-540-67442-9},
   keyword = {Computer Science},
   pages = {544-551},
   volume = {1800},
   url = {http://dx.doi.org/10.1007/3-540-45591-4_74},
   abstract = {The Java programming environment is increasingly being used to build large-scale multi-language applications. Whether these applications combine Java with other languages for legacy reasons, to address performance concerns, or to add Java functionality to preexisting server environments, they require correct and efficient native interfaces. This paper examines current native interface implementations, presents performance results, and discusses performance improvements in our IRIX Java Virtual Machine and Just-In-Time Compiler that have sped up native interfacing by significant factors over previous releases.},
   year = {2000},
   file = {pmjava.pdf}
}

   note = {10.1007/3-540-45591-4 74},


@INPROCEEDINGS{Tan06safejava,
    author = {Gang Tan and Srimat Chakradhar and Raghunathan Srivaths and Ravi Daniel Wang},
    title = {Safe Java native interface},
    booktitle = {In Proceedings of the 2006 IEEE International Symposium on Secure Software Engineering},
    year = {2006},
    pages = {97--106},
    file = {safejni.pdf}
}

@inproceedings{Kondoh:2008:FBJ:1390630.1390645,
 author = {Kondoh, Goh and Onodera, Tamiya},
 title = {Finding bugs in java native interface programs},
 booktitle = {Proceedings of the 2008 international symposium on
 Software testing and analysis},
 series = {ISSTA '08},
 year = 2008,
 isbn = {978-1-60558-050-0},
 location = {Seattle, WA, USA},
 pages = {109--118},
 numpages = 10,
 url = {http://doi.acm.org/10.1145/1390630.1390645},
 doi = {10.1145/1390630.1390645},
 acmid = 1390645,
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {java native interface, static analysis, typestate
 analysis},
 file = {p109-kondoh.pdf},
}

@inproceedings{Li:2009:FBE:1653662.1653716,
 author = {Li, Siliang and Tan, Gang},
 title = {Finding bugs in exceptional situations of JNI programs},
 booktitle = {Proceedings of the 16th ACM conference on Computer
 and communications security},
 series = {CCS '09},
 year = 2009,
 isbn = {978-1-60558-894-0},
 location = {Chicago, Illinois, USA},
 pages = {442--452},
 numpages = 11,
 url = {http://doi.acm.org/10.1145/1653662.1653716},
 doi = {10.1145/1653662.1653716},
 acmid = 1653716,
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {java native interface, static analysis, taint
 analysis},
 file = {p442-li.pdf}
}



** energiankulutus


@inproceedings{Furusho:2012:PEP:2307636.2307712,
 author = {Furusho, Hiroki and Hisazumi, Kenji and Kamiyama,
 Takeshi and Inamura, Hiroshi and Nakanishi, Tsuneo
 and Fukuda, Akira},
 title = {Poster: an energy profiler for android applications used in the real world},
 booktitle = {Proceedings of the 10th international conference on
 Mobile systems, applications, and services},
 series = {MobiSys '12},
 year = 2012,
 isbn = {978-1-4503-1301-8},
 location = {Low Wood Bay, Lake District, UK},
 pages = {517--518},
 numpages = 2,
 url = {http://doi.acm.org/10.1145/2307636.2307712},
 doi = {10.1145/2307636.2307712},
 acmid = 2307712,
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {energy consumption},
 file = {p517-furusho.pdf},
}

** profilointi

@article{Dunlavey:2007:PTI:1294297.1294298,
 author = {Dunlavey, Michael},
 title = {Performance tuning with instruction-level cost derived from call-stack sampling},
 journal = {SIGPLAN Not.},
 issue_date = {August 2007},
 volume = {42},
 number = {8},
 month = aug,
 year = {2007},
 issn = {0362-1340},
 pages = {4--8},
 numpages = {5},
 url = {http://doi.acm.org/10.1145/1294297.1294298},
 doi = {10.1145/1294297.1294298},
 acmid = {1294298},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {bottleneck, call stack sampling, instrumentation, optimization, performance analysis, profiling, software development},
 file = {p4-dunlavey.pdf}
} 

@inproceedings{Ansaloni:2010:RDE:1712605.1712616,
 author = {Ansaloni, Danilo and Binder, Walter and
 Villaz\'{o}n, Alex and Moret, Philippe},
 title = {Rapid development of extensible profilers for the
 Java virtual machine with aspect-oriented programming},
 booktitle = {Proceedings of the first joint WOSP/SIPEW
 international conference on Performance engineering},
 series = {WOSP/SIPEW '10},
 year = 2010,
 isbn = {978-1-60558-563-5},
 location = {San Jose, California, USA},
 pages = {57--62},
 numpages = 6,
 url = {http://doi.acm.org/10.1145/1712605.1712616},
 doi = {10.1145/1712605.1712616},
 acmid = 1712616,
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {aspect-oriented programming, bytecode
 instrumentation, calling context tree, concurrency,
 java, profiling},
 file = {p57-ansaloni.pdf}
} 

-- oleellinen!

@inproceedings{Thakkar:2008:FMB:1383559.1383567,
 author = {Thakkar, Dharmesh and Hassan, Ahmed E. and Hamann,
 Gilbert and Flora, Parminder},
 title = {A framework for measurement based performance modeling},
 booktitle = {Proceedings of the 7th international workshop on
 Software and performance},
 series = {WOSP '08},
 year = 2008,
 isbn = {978-1-59593-873-2},
 location = {Princeton, NJ, USA},
 pages = {55--66},
 numpages = 12,
 url = {http://doi.acm.org/10.1145/1383559.1383567},
 doi = {10.1145/1383559.1383567},
 acmid = 1383567,
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {framework, measurement, modeling, performance},
 file = {p55-thakkar.pdf}
}


@inproceedings{Mytkowicz:2010:EAJ:1806596.1806618,
 author = {Mytkowicz, Todd and Diwan, Amer and Hauswirth,
 Matthias and Sweeney, Peter F.},
 title = {Evaluating the accuracy of Java profilers},
 booktitle = {Proceedings of the 2010 ACM SIGPLAN conference on
 Programming language design and implementation},
 series = {PLDI '10},
 year = 2010,
 isbn = {978-1-4503-0019-3},
 location = {Toronto, Ontario, Canada},
 pages = {187--197},
 numpages = 11,
 url = {http://doi.acm.org/10.1145/1806596.1806618},
 doi = {10.1145/1806596.1806618},
 acmid = 1806618,
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {bias, observer effect, profiling},
 file = {p187-mytkowicz.pdf}
}

@inproceedings{Sharma:2005:ABA:1071021.1071046,
 author = {Sharma, Vibhu Saujanya and Trivedi, Kishor S.},
 title = {Architecture based analysis of performance, reliability and security of software systems},
 booktitle = {Proceedings of the 5th international workshop on
 Software and performance},
 series = {WOSP '05},
 year = 2005,
 isbn = {1-59593-087-6},
 location = {Palma, Illes Balears, Spain},
 pages = {217--227},
 numpages = 11,
 url = {http://doi.acm.org/10.1145/1071021.1071046},
 doi = {10.1145/1071021.1071046},
 acmid = 1071046,
 publisher = {ACM},
 address = {New York, NY, USA},
 file = {p217-sharma.pdf}
}

@article{Zhang:2012:SRJ:2365864.2151035,
 author = {Zhang, Yuan and Yang, Min and Zhou, Bo and Yang,
 Zhemin and Zhang, Weihua and Zang, Binyu},
 title = {Swift: a register-based JIT compiler for embedded JVMs},
 journal = {SIGPLAN Not.},
 issue_date = {July 2012},
 volume = 47,
 number = 7,
 month = mar,
 year = 2012,
 issn = {0362-1340},
 pages = {63--74},
 numpages = 12,
 url = {http://doi.acm.org/10.1145/2365864.2151035},
 doi = {10.1145/2365864.2151035},
 acmid = 2151035,
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {android, embedded jvm, just-in-time compiler,
 register-based bytecode},
}

@inproceedings{Zhang:2012:SRJ:2151024.2151035,
 author = {Zhang, Yuan and Yang, Min and Zhou, Bo and Yang,
 Zhemin and Zhang, Weihua and Zang, Binyu},
 title = {Swift: a register-based JIT compiler for embedded JVMs},
 booktitle = {Proceedings of the 8th ACM SIGPLAN/SIGOPS conference
 on Virtual Execution Environments},
 series = {VEE '12},
 year = 2012,
 isbn = {978-1-4503-1176-2},
 location = {London, England, UK},
 pages = {63--74},
 numpages = 12,
 url = {http://doi.acm.org/10.1145/2151024.2151035},
 doi = {10.1145/2151024.2151035},
 acmid = 2151035,
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {android, embedded jvm, just-in-time compiler,
 register-based bytecode},
 file = {p63-zhang.pdf}
}

@inproceedings{Moret:2011:PBI:1960275.1960292,
 author = {Moret, Philippe and Binder, Walter and Tanter,
 \'{E}ric},
 title = {Polymorphic bytecode instrumentation},
 booktitle = {Proceedings of the tenth international conference on
 Aspect-oriented software development},
 series = {AOSD '11},
 year = 2011,
 isbn = {978-1-4503-0605-8},
 location = {Porto de Galinhas, Brazil},
 pages = {129--140},
 numpages = 12,
 url = {http://doi.acm.org/10.1145/1960275.1960292},
 doi = {10.1145/1960275.1960292},
 acmid = 1960292,
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {aspect-oriented programming, bytecode
 instrumentation, dynamic program analysis, java
 virtual machine, mixin layers, modularity
 constructs},
 file = {p129-moret.pdf}
}

@inproceedings{Williams:2002:PSM:584369.584397,
 author = {Williams, Lloyd G. and Smith, Connie U.},
 title = {PASASM: a method for the performance assessment of software architectures},
 booktitle = {Proceedings of the 3rd international workshop on
 Software and performance},
 series = {WOSP '02},
 year = 2002,
 isbn = {1-58113-563-7},
 location = {Rome, Italy},
 pages = {179--189},
 numpages = 11,
 url = {http://doi.acm.org/10.1145/584369.584397},
 doi = {10.1145/584369.584397},
 acmid = 584397,
 publisher = {ACM},
 address = {New York, NY, USA},
 file = {p197-williams.pdf}
}

@inproceedings{Williams:1998:PES:287318.287353,
 author = {Williams, Lloyd G. and Smith, Connie U.},
 title = {Performance evaluation of software architectures},
 booktitle = {Proceedings of the 1st international workshop on
 Software and performance},
 series = {WOSP '98},
 year = 1998,
 isbn = {1-58113-060-0},
 location = {Santa Fe, New Mexico, United States},
 pages = {164--177},
 numpages = 14,
 url = {http://doi.acm.org/10.1145/287318.287353},
 doi = {10.1145/287318.287353},
 acmid = 287353,
 publisher = {ACM},
 address = {New York, NY, USA},
 file = {p164-williams.pdf}
}

@article{Husaini:1997:UJN:332100.332105,
 author = {Husaini, S. Fouzi},
 title = {Using the Java Native Interface},
 journal = {Crossroads},
 issue_date = {December 1997},
 volume = 4,
 number = 2,
 month = nov,
 year = 1997,
 issn = {1528-4972},
 pages = {18--23},
 numpages = 6,
 url = {http://doi.acm.org/10.1145/332100.332105},
 doi = {10.1145/332100.332105},
 acmid = 332105,
 publisher = {ACM},
 address = {New York, NY, USA},
 file = {p4-husaini.pdf},
}

@article{Lee:2010:JSD:1809028.1806601,
 author = {Lee, Byeongcheol and Wiedermann, Ben and Hirzel,
 Martin and Grimm, Robert and McKinley, Kathryn S.},
 title = {Jinn: synthesizing dynamic bug detectors for foreign language interfaces},
 journal = {SIGPLAN Not.},
 issue_date = {June 2010},
 volume = 45,
 number = 6,
 month = jun,
 year = 2010,
 issn = {0362-1340},
 pages = {36--49},
 numpages = 14,
 url = {http://doi.acm.org/10.1145/1809028.1806601},
 doi = {10.1145/1809028.1806601},
 acmid = 1806601,
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {dynamic analysis, ffi bugs, foreign function interfaces (FFI), java native interface (jni), multilingual programs, python/C, specification, specification generation},
 file = {p36-lee.pdf}
}

@inproceedings{Lee:2010:JSD:1806596.1806601,
 author = {Lee, Byeongcheol and Wiedermann, Ben and Hirzel,
 Martin and Grimm, Robert and McKinley, Kathryn S.},
 title = {Jinn: synthesizing dynamic bug detectors for foreign language interfaces},
 booktitle = {Proceedings of the 2010 ACM SIGPLAN conference on
 Programming language design and implementation},
 series = {PLDI '10},
 year = 2010,
 isbn = {978-1-4503-0019-3},
 location = {Toronto, Ontario, Canada},
 pages = {36--49},
 numpages = 14,
 url = {http://doi.acm.org/10.1145/1806596.1806601},
 doi = {10.1145/1806596.1806601},
 acmid = 1806601,
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {dynamic analysis, ffi bugs, foreign function
 interfaces (FFI), java native interface (jni),
 multilingual programs, python/C, specification,
 specification generation},
}

@article{Furr:2008:CTS:1377492.1377493,
 author = {Furr, Michael and Foster, Jeffrey S.},
 title = {Checking type safety of foreign function calls},
 journal = {ACM Trans. Program. Lang. Syst.},
 issue_date = {July 2008},
 volume = 30,
 number = 4,
 month = aug,
 year = 2008,
 issn = {0164-0925},
 pages = {18:1--18:63},
 articleno = 18,
 numpages = 63,
 url = {http://doi.acm.org/10.1145/1377492.1377493},
 doi = {10.1145/1377492.1377493},
 acmid = 1377493,
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {FFI, Foreign function interface, JNI, Java, Java
 Native Interface, OCaml, dataflow analysis,
 flow-sensitive type system, foreign function calls,
 multilingual type inference, multilingual type
 system, representational type},
 file = {a18-furr.pdf}
}

@inproceedings{Makelainen:2008:EIJ:1434790.1434797,
 author = {M\"{a}kel\"{a}inen, Raine and Di Flora, Cristiano
 and Mikkonen, Tommi},
 title = {Enhanced integration of Java to symbian OS using smart pointers},
 booktitle = {Proceedings of the 6th international workshop on
 Java technologies for real-time and embedded
 systems},
 series = {JTRES '08},
 year = 2008,
 isbn = {978-1-60558-337-2},
 location = {Santa Clara, California},
 pages = {38--47},
 numpages = 10,
 url = {http://doi.acm.org/10.1145/1434790.1434797},
 doi = {10.1145/1434790.1434797},
 acmid = 1434797,
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {J2ME, Java native interface, Symbian OS, mobile Java
 integration, mobile devices programming},
 file = {p38-makelainen.pdf}
}

@inproceedings{Tan:2007:IIA:1297027.1297031,
 author = {Tan, Gang and Morrisett, Greg},
 title = {Ilea: inter-language analysis across java and c},
 booktitle = {Proceedings of the 22nd annual ACM SIGPLAN
 conference on Object-oriented programming systems
 and applications},
 series = {OOPSLA '07},
 year = 2007,
 isbn = {978-1-59593-786-5},
 location = {Montreal, Quebec, Canada},
 pages = {39--56},
 numpages = 18,
 url = {http://doi.acm.org/10.1145/1297027.1297031},
 doi = {10.1145/1297027.1297031},
 acmid = 1297031,
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {JNI, JVML, inter-language analysis, java native
 interface, specification extraction},
} 
[download]

@article{Tan:2007:IIA:1297105.1297031,
 author = {Tan, Gang and Morrisett, Greg},
 title = {Ilea: inter-language analysis across java and c},
 journal = {SIGPLAN Not.},
 issue_date = {October 2007},
 volume = 42,
 number = 10,
 month = oct,
 year = 2007,
 issn = {0362-1340},
 pages = {39--56},
 numpages = 18,
 url = {http://doi.acm.org/10.1145/1297105.1297031},
 doi = {10.1145/1297105.1297031},
 acmid = 1297031,
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {JNI, JVML, inter-language analysis, java native
 interface, specification extraction},
 file = {p39-tan.pdf}
}




* tsekattu, ei niin oleelliset?

@ARTICLE{970569,
 author = {Liu, Y.A. and Gomez, G.},
 journal = {Computers, IEEE Transactions on},
 title = {Automatic accurate cost-bound analysis for high-level languages},
 year = 2001,
 month = {dec},
 volume = 50,
 number = 12,
 pages = {1295 -1309},
 abstract = {Not available},
 doi = {10.1109/TC.2001.970569},
 ISSN = {0018-9340},
 file = {00970569.pdf},
}


** Journal of Object-Oriented Programming


Library:	 Kumpulan kampuskirjasto, lehdet, ei kotilainaan
Call Number:	 Hs 1A:67-86 Journal of object-oriented programming

Vol. 12, no. 6: Performance: myths, measurements, and morals; Part 1: myths 
Vol. 12, no. 7: Performance: myths, measurements, and morals; Part 2: Even easy measurements are hard 
Vol. 12, no. 8: Performance: myths, measurements, and morals; Part 3: Quadratic behavior will get you if you don't watch out! 
Vol. 12, no. 9: Performance: myths, measurements, and morals; Part 4: How might we speed up a simple program? 
Vol. 13, no. 1: Performance: myths, measurements, and morals; Part 5: How not to measure execution time 
- puuttuu kirjastosta mutta olisi ollut paras

Vol. 13, no. 2: Performance: myths, measurements, and morals; Part 6: Useful measurements\(emfinally! 
Vol. 13, no. 3: Performance: myths, measurements, and morals; Part 7: Detailed measurements of a small program


* ei missään nimessä

@MISC{Matthews07operationalsemantics,
    author = {Jacob Matthews and et al.},
    title = { Operational Semantics for Multi-Language Programs},
    year = {2007}
}

@InProceedings{effcpp,
 author = {Moss, Darren G.},
 title = {Efficient C/C++ Coding Techniques},
 booktitle = {Embedded Systems Conference Proceedings},
 year = 2001,
 file = {ESC_Boston_01_304_paper.pdf},
}

