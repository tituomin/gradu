#+AUTHOR: Timo Tuominen
#+TITLE: Suorituskykyinen sovellusarkkitehtuuri JNI-natiivirajapintaa hyödyntävälle Android-sovellukselle

#+LATEX_HEADER: \usepackage[finnish]{babel}
#+LATEX_HEADER: \usepackage[latin9]{inputenc}
#+LaTeX_CLASS: gradu

Pro gradu -tutkielman aihemäärittely\newline
Timo Tuominen\newline
Ohjaajat: Jukka Paakki, Antti-Pekka Tuovinen, Juha Vihavainen\newline
Tietojenkäsittelytieteen laitos\newline
HELSINGIN YLIOPISTO\newline
12.10.2012

\section*{Suorituskykyinen sovellusarkkitehtuuri JNI-natiivi\-rajapintaa hyödyntävälle Android-sovellukselle}

/Android/ on Googlen kehittämä Linux-pohjainen käyttöjärjestelmä ja
sovellus\-ke\-hi\-tys\-a\-lus\-ta mobiililaitteille. Tutkielma kuvailee ja arvioi
arkkitehtuurimalleja suorituskykykeskeisille Android-sovelluksille
tapauksissa, joissa osa sovelluksen komponenteista on kirjoitettu
Java- ja osa C-ohjelmointikielellä.

Yleensä Android-sovellukset ohjelmoidaan /Java/-ohjelmointikielellä ja
suoritetaan Googlen Androidia varten kehittämässä
/Dalvik/-virtuaalikoneessa. Androidin Java-sovelluskehyksen
käyttäminen ei aina kuitenkaan ole kokonaisuuden kannalta paras
ratkaisu. Ensinnäkin käytettävissä saattaa olla muulla kielellä kuin
Javalla kirjoitettua ohjelmakoodia, jota halutaan hyödyntää
sellaisenaan. Toisaalta täysin uudestakin mobiilisovelluksesta
halutaan usein lähtökohtaisesti rakentaa mahdollisimman
/siirrettävä/.[fn:1] Kolmas ja tämän tutkielman kannalta oleellisin
este Androidin Java-sovelluskehyksen käyttämiselle on sen
/suorituskyky/, erityisesti jos ohjelmisto suorittaa paljon raskasta
laskentaa tai sille on oleellisia tosiaikavaatimuksia.

/Suorituskykytuotanto/ (/Software Performance Engineering/, /SPE/) on
ohjelmistotekniikan osa-alue, jossa ohjelmistoprosessin alusta lähtien
varmistetaan, että ohjelmistolle asetetut suorituskykyvaatimukset
täyttyvät lopullisessa tuotteessa. Menettely on näennäisesti
ristiriidassa usein lainatun Donald Knuthin lausahduksen kanssa:
"Ennenaikainen optimointi on kaiken pahan alku ja juuri." Yleisen
tulkinnan mukaan ohjelmistoa suunniteltaessa tulisi keskittyä sen
oikeaan toimivuuteen ja optimoida suorituskykyä vasta, kun käytössä on
suoritettava ohjelma. Sen suoritusaikaista käyttäytymistä
/profiloimalla/ mitataan, mihin ohjelman osiin optimoinnissa kannattaa
keskittyä.

Android-sovelluskehityksestä löydämme kuitenkin tapauksia, joissa
kehitysprosessin loppuvaiheessa voi olla liian myöhäistä vaikuttaa
suorituskykyongelmiin, jotka kumpuavat varhaisista valinnoista kuten
käytetyistä ohjelmointikielistä, ohjelmiston rakenteellisista
ominaisuuksista ja komponenttien väliseen kommunikaatioon liittyvistä
ratkaisuista. SPE:n keskeisiä väitteitä onkin, että ohjelmiston
makrotason /arkkitehtuurin/ suunnittelu on usein suorituskyvyn
kannalta vähintään yhtä oleellinen tekijä kuin mikrotason optimoinnit.

\newpage

Tutkielmassa keskitytään siihen, mitä erityisvaatimuksia
monikielinen Android-ohjelmointi asettaa sovelluksen
arkkitehtuurille suorituskykynäkökohdista. Java-kielen lisäksi ja
rinnalla Androidia on mahdollista ohjelmoida myös käyttäen
kohdealustana laitteiston omaa natiivisuoritysympäristöä. Tällöin
ohjelmointi tapahtuu käytännössä C- tai C++-kielillä, joista ohjelma
käännetään laitteiston prosessoriarkkitehtuurin konekielelle, tällä
hetkellä yleensä ARM-konekielelle.

Menetelmän mahdollistaa Java-kielen /Java Native Interface/ -standardi
(/JNI/), joka on toteutettu myös osana
Dalvik-virtuaalikonetta. JNI-standardi on esimerkki
/vieraskutsurajapinnasta/ (/Foreign Function Interface/, /FFI/), joka
on mekanismi kahden eri ohjelmointikielillä kirjoitetun ohjelman
yhdistämiseksi.

Pelkän JNI-toteutuksen lisäksi Android-kehittäjällä on käytettävissään
Native Development Kit (/NDK/)-työkalukokonaisuus. Siihen sisältyvät
rakennusskriptit automatisoivat C- ja C++-lähdekoodin kääntämisen
laitteiston kohdearkkitehtuurille sopivaksi
kirjastobinääriksi. Lisäksi NDK sisältää joukon C-kielisiä
otsaketiedostoja ja ohjelmointirajapintoja, joiden kautta osajoukkoa
Android-alustan ominaisuuksista voidaan hyödyntää suoraan natiivista
ohjelmasta kutsumatta Java-sovelluskehyksen rajapintoja JNI-kerroksen
kautta. Nämä natiivit rajapinnat ovat stabiileja toisin kuin useimmat
Android-arkkitehtuurin natiivitason rajapinnat. Uusissa NDK-versioissa
on jopa mahdollista ohjelmoida näitä rajoitettuja rajapintoja käyttävä
sovellus kokonaisuudessaan ilman Javaa.

Suorituskyvyn kannalta Androidin natiiviohjelmoinnissa keskeistä on
Java- ja natiivikomponenttien välinen kommunikaatio ja sitä kautta
myös sovelluksen kokonaisarkkitehtuuri. JNI-kutsukerroksen käyttäminen
on aina suorituskykyrasite, erityisesti kun natiivikomponentti kutsuu
Java-kom\-ponenttia. Monia haasteita liittyy myös muistinhallintaan ja
resurssien jakamiseen virtuaalikoneen hallitseman muistin ja
natiivikomponentin välillä. Tutkielmassa käytetään
SPE-arviointimenetelmiä ja erityisesti ohjelmakoodin instrumentointia
sekä suorituskykymittauksia tutkimaan monikielisyydestä johtuvien
rasitteiden suuruusluokkia. Tuloksista johdetaan suosituksia Androidin
natiivikehityksessä tehokkaalle sovellusarkkitehtuurille ja esitellään
arkkitehtuuria käyttävä esimerkkisovellus.

[fn:1] Esimerkiksi Applen /iOS/-käyttöjärjestelmän sovellukset käännetään /Objective-C/ -kielestä laitteiston konekielellä suoritettaviksi, ja alustan kehitystyökaluilla voi suoraan hyödyntää myös C- tai C++-kielisiä komponentteja.


\nocite{*}
\bibliographystyle{tktl}
\bibliography{gradu_aihe}
