* <2016-05-06 Fri 21:09> tuli mieleen, että voisko tuo CopyUTF tai joku muukin olla O2?
* <2016-05-06 pe 10:32> in progress: linux perf measurement with 0.1s to ensure zip is correctly made
* DONE <2016-05-01 su 19:52> run as a test with byte == representative ! got good results
* <2016-05-01 su 12:12> [[file:~/android-source-412/libcore/luni/src/main/native/libcore_io_Memory.cpp::static%20void%20Memory_peekByteArray(JNIEnv*%20env,%20jclass,%20jint%20srcAddress,%20jbyteArray%20dst,%20jint%20dstOffset,%20jint%20byteCount)%20{][peek magic (native)]]
  Huomattu, että sisäisesti peek-metodit käyttävät vain normaaleja Set*ArrayRegion (plus swappaavat tarvittaessa).
  [[file:~/android-source-412/libcore/luni/src/main/java/java/nio/ReadWriteDirectByteBuffer.java::this.block.pokeByteArray(offset%20+%20position,%20src,%20srcOffset,%20byteCount);]]
  Poke = put, peek = get
* <2016-05-01 su 12:05> [[file:~/android-source-412/libcore/luni/src/main/java/libcore/io/Memory.java::public%20static%20native%20byte%20peekByte(int%20address);][Place where bulk copying magic happens. (Native methods)]]
* DONE <2016-04-30 la 15:15> poistettu vielä nio view-versioista ylim. java-deklaraatio intArr etc.

* <2016-04-30 la 00:25> C2C readcompleteshort : myös siinä read hitaampi kuin write
* <2016-04-28 to 23:47> huomattu: että java overheadista tulee järkevä, jos varmistaa että on JIT-käännetty
  tai ainakin jos on ajanut warmupin overhead-filtterillä
* TODO <2016-04-26 ti 23:42> heräsi epäilys, optimoidaanko bulk kokonaan pois?
* <2016-04-26 ti 22:14> !NIO:ssa on array()-metodi, jossa arrayn voi palauttaa natiivikoodiin?
* <2016-04-25 ma 00:04> bytebufferview: clear on loopin sisällä väärin
* <2016-04-24 su 23:43> miksi commentoitu ulos newweakglobalref?
* <2016-04-24 su 23:17> huomattu, että read/writecompletearray eivät vertailukelpoisia keskenään
  johtuu siitä, että read-versioissa on mukana ylimääräinen
  side-effect, jota ei tarvita, eikä ole kai mielekästä lisätäkään,
  write_versioihin --> huomioi "measuring overhead":issa?
* <2016-04-24 su 17:37> huomattu, että NIO-mittaukset todella aikaavieviä
  melkein 180 s max
* <2016-03-26 Sat 21:28> huomattu, että weakglobalref j>j aiheuttaa gc:n
  tsekkaa, mistä johtuu -- satunnainen virhe - meneekö shufflella pois/johtuuko edellisestä ajosta?
  katso myös logit

* <2016-03-26 Sat 18:34> figuring out results [0/2]
  do j > j basic benchmarks really have side effects?
  profile only gives jit code cache ... (or does it)
  5edf0f00-8836-4937-a066-7b4b6479acb2 page 43
  gives typical int value 11783292 ns = 1.1e7

  -- but j > j overhead is NEGATIVE ?
  -- 12245916 is the zero value
  -- 11783292 not much difference, but some?
** TODO check new values with more repetitions

* <2016-03-16 ke 23:45> missing symbols!
  https://lwn.net/Articles/371207/
  DMA -> luultavasti kyse on laiteajurikoodista ! !
* DONE <2016-03-12 la 13:47> huomattu että pitkään kestävä mittaussessio johtaa tyhjään logidumppiin
  Johtunee siitä, logi truncoituu, eikä startPattern matchaa ollenkaan ..
  Ratkaisu? http://stackoverflow.com/questions/6321555/what-is-the-size-limit-for-logcat-and-how-to-change-its-capacity
* <2016-02-28 su 00:09> perffien tutkintaa muista!
  cp ~/NativeBenchmark/obj/local/armeabi/libnativebenchmark.so data/fi.helsinki.cs.tituomin.nativebenchmark/lib
* <2016-02-27 la 23:15> IMPORTANT removed memory leak f29cf9b
* <2016-02-27 la 20:39> added some certainty that j2j custom getfield side-effects actually working
* <2016-02-27 la 12:51> fixes and formatting
** Verified fix to npe in getFilter works
** Ran whole series through :quick profile

* <2016-01-21 to 19:06> last time compared to
** installed new system image with hopefully correct su
*** DONE verify su
