#+TODO: TODO PLAN CODE TEST | WONTFIX DONE
Gradu: duunit

Missä mennään:
[[file:~/gradu/paper/bib/main.bib::saavedra]]
(hyvä peruslähde benchmarkeista)

* TODO <2016-04-28 to 21:26> check if doubling java overhead leads to sane results
* DONE tsekkaa tallentuuko memmap oikein profin dataan
** erit. ashmem dalvik code cache
* Koodi
** generator
*** TODO varmista että kaikissa on side effect (java)
    varmista overhead-tsekkiin vertaamalla
    minimaalinen "summaava" tallennus ?
    tai yksinkertainen "tsekkaa onko null / 0 vai ei", säädä result-muuttuja
    - otettu käyttöön array -iteraatioissa, muihinkin ?
    - <2016-03-26 Sat 18:42> huomattu, että java-counterpartit ehkä vaativat myös?
*** TODO tärkeä! tsekkaa voiko Class-tyyppisiä
    parametreja välittää JNI-natiivimetodille jclasseina
**** TÄRKEÄ MIKSI???
*** TODO java-versiot / analogiset mittaukset loppuun
**** TODO NIO complete read write
*** TODO j2jweakglobalreference aiheuttaa gc:tä
*** PLAN potentiaalisesti puuttuvat benchmarkit
**** JNI-vastinparit
***** TODO fix read/writeobjectarrayelement
***** TEST J>J puuttuu (non-dynamic)
****** kaikki paitsi
       - accessdirectbuffer
       - findclass
       - getobjectclass
       - writeobjectarrayelement
       - weakglobalref
****** todo
******* TODO get<static><type>field ?
******* TODO set<static><type>field ?
****** perustelut
       - globalref ei ole
       - localframe ei ole
       - localref ei ole
       - newstringutf
****** newstringutf 0:ssa?
****** createobjectref minimissä?
*** TEST check-interrupted-interval ja max-repetitions, oikeat arvot
    - ok: maxreps 100, bmparameter 8 * 8
      - mock command line: vieläkin wait for concurrent
*** TEST variations on array traversal, read + write
*** DONE poista turhat log-viestit (tämä on oma build-askeleensa)
*** WONTFIX c>c hitaampi kuin j>j (johtunee interrupt-checkistä) ??
*** TODO checkaa const-asiat (gcc warning)
*** TODO JNI error checking! (käy koodi läpi vielä kerran)
*** TODO testaa call-variants (ellipsis, array, va_args) (?)
*** DONE lisää eri kutsutyypit (virtual, nonvirtual) benchmarkkeihin?
*** WONTFIX sopivassa vaiheessa poista interrupt check kokonaan, ehkä ui-päivityskin
    Ei muuten voi poistaa koska linux perf tool.
    Pitäisi refaktoroida omiksi benchmarkeiksi?
    (Generoida 2 versiota?)
** nativebenchmark
*** TODO tsekkaa vielä kerran millis/micros/ym. ..
    android_os_SystemClock.cpp
    micros käyttää gettimeofdayta,
    millis käyttää (parempaa?) clock_gettime(MONOTONIC):ia
    nanos (java.lang.System) käyttää myös MONOTONIC:ia !!
*** DONE miksi superuser kaatuu ensimmäiseen promptiin
    toimiiko kuitenkin oikein (ilmeisesti)
    "userspace" > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor"
    cpufreq  > /sys/devices/system/cpu/cpu0/cpufreq/scaling_setspeed"
*** param
*** runner
**** TODO check
**** TODO run c c first, then j j ?
**** TODO maybe remove explicit gc? > check statistically...
**** TODO delete temp files ?
**** TEST thread priority ?
**** TODO default != 0 != the first iterator value ...
**** TEST shuffle takaisin päälle
**** TODO lisää ja arvioi oikea perf event spesifikaatio
**** TODO oprofile (?)
**** TODO warmup: tulosten stabiloituminen?
**** TODO benchmarkrunner: yhdistä eri size-variaatiota vaativat bm:t (?)
**** TODO erottele android-spesifi osa jni-benchmarkeista
***** TODO logging
***** TODO sdcard path
***** TODO system clock
*** native
**** TEST c-koodissa: mikä on check interrupted-overheadi, korvaa muuttujalla?
** analyzer
*** TODO Tutki jakaumien numeroarvot.
    DEADLINE: <2013-06-04 Tue>
*** TODO mittausten tilastollinen tulkinta
    (truncated mean? (THIS >> or assume lower limit...))
**** TODO >> mittaa vasteaikojen tilastollinen jakauma > mallinna
*** TODO overhead-normalisointi
*** TODO multiplication-skaalaus
*** TODO any-logiikka ei toimi (0-arvoilla, reference types)
*** TODO mieti tarkemmin dynamic-non-dynamic keskinäinen vertailu
*** DONE kaikki custom-benchmarkit mukaan
*** DONE filtteröi representative
*** DONE akselien labelit
*** DONE tulosta jokaiseen pdf:ään id, jolla löytää metatiedot
**** DONE metatiedot erilliseen tekstitiedostoon
*** DONE tsekkaa automaattisesti datasta columnien määrä?

* Teksti [6/21]
** TODO latex koodiblokkien fonttikoko ---
** huomiot hardcopy <2014-01-12 Sun>
*** poista väite tekstin kulusta
    [[file:~/gradu/paper/src/chapters/performance.org::poista-seuraavaksi]]
** formatointi
*** TODO http://tex.stackexchange.com/questions/18910/multiple-citations-with-pages-using-biblatex
*** TODO aivan lopuksi säädä overfull-korjaukset
    http://www.tex.ac.uk/cgi-bin/texfaq2html?label=overfull
*** TODO oikea syntaksi useall viitteelle

** kysy vihavaiselta
*** TODO ja-sana ja pilkutus
*** TODO sivu 9 vihavaisen kommentti mitä tarkoittaa
    [[file:~/gradu/paper/src/chapters/performance.org::outo%20kommentti][file:~/gradu/paper/src/chapters/performance.org::outo kommentti]]
*** TODO vihavainen sivu 13 selvennä/kysy miten erikoiseen
    sivunumerointiin pitäisi suhtautua

*** TODO s. 25 mitä tarkoittaa ARM-kysymysmerkki?

** muuta grafiikkaa
*** TODO sivun 3 kaavio: lisää nimiavaruus

** poistot
*** Poista mittauksesta mallintamiseen?
    [[file:~/gradu/paper/src/chapters/performance.org::necessary-section]]
** lisäykset
*** uusi android-virtuaalikone
    [[file:~/gradu/paper/src/chapters/android_summary.org::kappale-art-aot]]
*** motivoi benchmarkien käyttöä tässä kohtaa
    [[file:~/gradu/paper/src/chapters/performance.org::benchmark]]
** korjaukset / tarkennukset
*** analysoi benchmark-ajattelua suhteessa edelliseen kappaleeseen
    [[file:~/gradu/paper/src/chapters/performance.org::ajattele-uudelleen]]
*** ashmem-onko persistoitu
    [[file:~/gradu/paper/src/chapters/android_summary.org::ashmem]]
*** posix väärä merkitys
    [[file:~/gradu/paper/src/chapters/android_summary.org::posix]]
** Vihavaisen kommentit maaliskuu 2013
*** TODO mitä tarkoittaa käyttötapaus
    [[file:~/gradu/paper/src/chapters/performance.org::k%C3%A4ytt%C3%B6tapaus][file:~/gradu/paper/src/chapters/performance.org::käyttötapaus]]
**** ilmeisesti yleinen suoritustilanne?
*** TODO ss. 18 4+1-malli pitäisi avata tai poistaa
*** TODO tarkenna perf-työkalun käyttöä vastaamaan lopullista benchmarkkausta
    [[file:~/gradu/paper/src/chapters/performance.org::fix-benchmarking]]

*** TEST tarkista vielä, onko selvä nyt
    [[file:~/gradu/paper/src/chapters/performance.org::tarkkuusaste]]
*** TEST korjaa sivun 27 esimerkki - korjattu mutta pitäisikö laajentaa?
    [[file:../paper/src/chapters/jni.org::GetStringChars]]
*** TEST tarkista tavutus vasteajoissa s. 29
*** DONE overflowt (s.27)
*** DONE esimerkit s.28
*** DONE s. 23, 4.1.2 pitää kirjoittaa uudelleen
**** siirretty eri kohtaan, selvennetty
*** DONE sivu 15 overflow
*** DONE poista minä-muodot
*** DONE yleishuomio: esittele ensin JNI, sitten    vasta toteutushuomiot? 

* Tarkista / huomioi / perustele
** TODO kokeile jit-koodin disassembloimista
   https://groups.google.com/d/msg/android-platform/nn5RbCm7Fd4/5fDVsZENtvcJ
** TODO ashmem on shared memory, ei persistent (disk api on virtuaalinen)
** TODO huomaa, että getfieldin tyypit yms. voisi parametrisoida
** TODO gof-book: onko proxy oikea termi peer classille?
** TODO androidin jni-toteutus ei käytä funktiotauluja?
** TODO register natives?
   The RegisterNatives function is useful for a number of purposes:
   - It is sometimes more convenient and *more efficient* to register
     a large number of native method implementations eagerly, as
     opposed to letting the virtual machine link these entries lazily.
   - You may call RegisterNatives multiple times on a method, allowing the
   native method implementation to be updated at runtime.
   - RegisterNatives is particularly useful when a native application embeds a
   virtual machine implementation and needs to link with a native
   method implementation defined in the native application. The
   virtual machine would not be able to find this native method
   implementation automatically because it only searches in native
   libraries, not the application itself.
** TODO perustele miksei lisätty muut kuin jnienv-funktiot testiin
** TODO frameworks/native/libs/utils/Timers.cpp
*** rivi 35 uptimemillis toteutus, ei aina käytä gettimeofdayta
** TODO Tee näin? (testattu: muistisyöppö...)
   http://toyoizumilab.brain.riken.jp/hideaki/res/histogram.html#OptBin
** TODO Merkitse muistiin loggauspohdinnat.
