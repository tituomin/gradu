

Aluksi esitetään  lyhyt yleiskuvaus Android-järjestelmästä ennen
siirtymistä tutkielman varsinaiseen aiheeseen, suorituskyvyn
mittaamiseen ja mallintamiseen sekä Androidin
Java-natiivirajapintaan.

Tämä tutkielma perustuu Androidin versioon 4.1.2. Tutkielman aiheen
kannalta se tarkoittaa erityisesti, että tutkielman mittaukset ja
niiden tulokset koskevat Dalvik-virtuaalikonetta. Androidin versiosta
6 lähtien Dalvik on korvattu ART-virtuaalikoneella. Uudistettu
virtuaalikone tekee mittaustuloksista osin vanhentuneita, mutta
tutkielman metodologian kannalta uudistuksella ei ole väliä. Samat
mittaukset voi toteuttaa samoilla periaatteilla ja pitkälti samalla
mittausohjelmistollakin uudemmissa Android-versioissa.  Lisäksi
käytössä olevista Android-laitteista Dalvikin osuus on vielä
merkittävä.

* Androidin rakenne

Android on mobiilikäyttöjärjestelmä, johon kuuluu oma versionsa
Linux-käyttö\-jär\-jes\-tel\-mä\-y\-ti\-mes\-tä. Siinä on mukana
joitakin mobiililaitteille räätälöityjä ominaisuuksia, jotka
esimerkiksi vähentävät muistin- ja virrankulutusta @@embedded(49--53).

Android ei muistuta tyypillistä Linux-pohjais\-ta työpöytä- tai
palvelinkäyttöjärjestelmää @@embedded(48). Se on läheisempää sukua
riisutummille /upotetuille/ Linux-järjestelmille, mutta eroaa
niistäkin. Ensinnäkin merkittävä osa sovelluksista ja koko
järjestelmästä on ohjelmoitu Javalla ja suoritetaan
virtuaalikoneessa. Järjestelmän rakenne ei muutenkaan noudata
esimerkiksi POSIX-standardia vaan perustuu hajautettuun
komponenttiarkkitehtuuriin, joka on nimeltään /Binder/ @@embedded(79).
Arkkitehtuurin infrastruktuuri, Dalvik-virtuaalikone sekä suuri osa
järjestelmän matalan tason palveluista on toteutettu C- ja
C++-kielillä @@embedded(138).

\todo{Yllä: POSIX ei liity userspacen järjestämiseen <<posix>>}

\begin{figure}[h!]
\centerline{
\includegraphics[scale=1]{figures/android_architecture_complex.pdf}
}\caption{Android-järjestelmän kokonaisarkkitehtuuri \cite[muokattu]{embedded}}\label{fig:Beer}
\end{figure}

# todo tähän kaavio luultavasti embedded androidista
# todo määrittele upotettu
Kuva \ref{fig:Beer} esittää Android-järjestelmän perusosia.  Kuvan
arkkitehtuurikerroksista ylimmät ovat lähimpänä käyttäjää ja
sovellusohjelmoijaa. Suurin osa Android-sovelluksista ohjelmoidaan
Javalla Androidin sovelluskehyksen ohjelmointirajapintaa @@sdk
käyttäen. Ohjelmointirajapinnan ~android~-nimiavaruuden paketit ovat
varta vasten Androidia varten rakennettuja. Ne päästävät ohjelmoijan
käsiksi käyttöjärjestelmän ja laitteiston palveluihin. Nimiavaruuden
~java~ ohjelmointirajapinta on osajoukko /Java Standard Edition/
-rajapinnasta ja on peräisin /Apache Harmony/ -projektista
@@embedded(77).
# todo ei sisällä koko SE:tä (lähde: embedded?)

Kaikki Java-ohjelmakoodi käännetään Androidia varten ensin normaaliksi
tavukoodiksi ja siitä Androidin omaksi rekisteripohjaiseksi
~dex~-tavukoodiksi, jota suorittaa Dalvik-virtuaalikone @@aot(15). Dalvikissa
suoritetaan sekä sovellusohjelmat että järjestelmän sisäiset
komponentit -- siltä osin kuin ne on toteutettu Javalla.

Android on alusta lähtien suunniteltu tukemaan moniajoa. Jokaista
Android-sovellusta suoritetaan omalla käyttäjätunnuksellaan, omassa
Linux-prosessissaan ja omassa virtuaalikoneessaan
@@embedded(43--45). Tällä tavoin sovellukset on eristetty omiin
hiekkalaatikoihinsa, ja esimerkiksi sovellusten käyttöoikeuksista
voidaan pitää kirjaa käyttöjärjestelmän käyttäjänhallinnan avulla.

Android-ohjelmointirajapinnan luokat antavat sovellusohjelmoijalle
yksinkertaisen näkymän käyttöjärjestelmän palveluihin. Valtaosa
palveluiden varsinaisesta toteutuksesta sijoittuu kuitenkin Androidin
/järjestelmäpalveluihin/ (/system services/) eli komponentteihin joita
järjestelmä suorittaa omissa palvelinprosesseissaan
@@embedded(79). Yleensä sovellusohjelmoija ei kutsu näitä
tukipalveluita suoraan, vaan Android-ohjelmointirajapintojen sisäiset
toteutukset kutsuvat niitä Binderin tarjoaman prosessienvälisen
kutsumekanismin avulla sovelluksen prosessista käsin. Komponenttien
välinen sidonta on täysin ajonaikaista ja perustuu erilliseen
palveluhakemistokomponenttiin.
# todo palveluhakemistokomponentti, lähteet & tarkenna:
# osa androidia vai osa binderia?

Osa Androidin järjestelmäpalveluista on toteutettu Java-kielellä ja
osa C++-kielellä. Javan natiivirajapinta JNI esitellään tarkemmin
luvussa \ref{sec-jni}, mutta voimme jo havaita, että natiivirajapintaa käytetään
yleisesti järjestelmän sisäisessä toteutuksessa, kun Java-koodista on
kutsuttava matalamman arkkitehtuuritason natiiveja kirjastoja
@@embedded(78).  Esimerkiksi Binder-kutsumekanismin toteutus on
C++-kielinen, mutta Android sisältää myös Java-rajapinnat Binderin
käyttöön. Sisäisesti nämä Javan Binder-sidonnat on toteutettu
natiivirajapinnan avulla @@aosp. Niin ikään monet Javalla toteutetut
järjestelmäpalvelukomponentit kutsuvat itse natiivikirjastoja JNI:n
kautta. Jotkut Android-ohjelmointirajapinnan luokat kutsuvat
natiivikirjastoja suoraan JNI:n kautta, mutta ohittavat
järjestelmäpalvelutason: esimerkiksi ~Log~-luokka kutsuu suoraan
~liblog~-natiivikirjastoa.
# lähde: binder.pdf (? voiko käyttää)
# todo sisäinen viite

Järjestelmäpalveluita matalammalla olevia arkkitehtuuritasoja, mukaan
lukien dynaamisesti ladattavia natiivikirjastoja, en käsittele
yksityiskohtaisesti. Mainittakoon kuitenkin, että Native Development
Kitin @@ndk vakaat natiivirajapinnat kuuluvat tälle tasolle
arkkitehtuurissa.  Näitä dynaamisesti linkitettyjä natiivikirjastoja
voi siis kutsua suoraan tavallisilla aliohjelmakutsuilla
natiiviohjelmasta käsin ohittaen
järjestelmäpalvelukerroksen. Androidin Binder-komponentteihin ei
natiiviohjelmoija pääse käsiksi. Natiivityökalujen ulottumattomiin
jääkin suurin osa Androidin laajasta toiminnallisuudesta, mutta
esimerkiksi peliohjelmointia varten NDK:n natiivirajapinnat ovat
riittäviä @@embedded(46--47). Ne sisältävät muun muassa tuen OpenGL-
ja bittikarttagrafiikalle, ääni- ja multimediatoimintoja sekä
valmiudet laitteen sensorien lukemiseen.

# todo check C - *ja* C++??
# todo check dynamic linking
# emvbedded system services

# Tiivistetysti voidaan sanoa, että Android on Linux-ytimen päälle
# rakennettu hajautettuihin olioparadigmaa noudattaviin komponentteihin
# perustuva käyttöjärjestelmä. Järjestelmän toiminnoista valtaosa on
# toteutettu järjestelmäpalveluina ja sidottu toisiinsa sekä
# sovelluksiin Binder-kutsumekanismilla. Muut käyttöjärjestelmän osat
# toimivat tukena tälle suurelta osin Java-ympäristöön perustuvalle
# järjestelmälle.

# mainitse ndk:n stable apit??

# Java-writ­ten sys­tem ser­vices, for in­stance, very often use JNI
# to com­mu­ni­cate with match­ing na­tive code that in­ter­faces with
# a given ser­vice's cor­re­spond­ing hard­ware.  lähteestä
# embedded #android

# binder : jokainen jvm omassa prosessissaan!
# system services
# jni
# tsekkaa toimiiko system server omassa yhdessä dalvikissa
# todo mainitse renderscript
* Dalvik-virtuaalikone
\label{sec-dalvik-intro}

Javalla ohjelmoidun Android-sovelluksen matka suoritettavaksi
ohjelmaksi on pääpiirteissään seuraavanlainen. Aluksi sovellus
käännetään Java-lähdekoodista tavallisella Java-kääntäjällä
luokkatiedostoiksi, jotka sisältävät standardinmukaisen
Java-virtuaalikoneen ymmärtämää välikieltä, Java-tavukoodia.

Androidin Dalvik-virtuaalikone ei kuitenkaan ole
Java-virtuaalikone. Luokkatiedostoja käyttävä Java-virtuaalikone
noudattaa pinopohjaista käskyarkkitehtuuria, jossa konekäskyjen
operandit sijaitsevat implisiittisesti virtuaalikoneen pinossa
@@dvm-jit(15). Dalvik sen sijaan on rekisteripohjainen virtuaalikone,
jossa konekäskyjen operandit viittaavat eksplisiittisesti
virtuaalikoneen ylläpitämiin rekistereihin. Lisätietoa
virtuaalikoneratkaisuiden eroista antaa lähde @@showdown.

# todo etsi ne lähteet

Androidin kehitystyökalut kääntävätkin ohjelman Java-tavukoodista
edelleen /Dalvik Executable/ -formaattiin, ~.dex~-päätteisiin
tiedostoihin. Näistä tiedostoista Dalvik-virtuaalikone lataa ohjelman
luokat ja niiden sisältämät Dalvik-käskykannan mukaiset käskyt.
# todo wikipedia sanoo että kaikkia class-tiedostoja ei käännetä?

Dalvik-virtuaalikone nykyisessä muodossaan on /jäljittävä Just-In-Time
-kääntäjä/ (/tracing JIT compiler/) @@dvm-jit(15-16). Näin ollen
Dalvikin /tulkki/ suorittaa Dalvik-käskykannan mukaista ohjelmaa ja
pitää samalla kirjaa koodialueista, usein silmukoista, joiden
kääntäminen suoraan laitteistoalustan konekielelle nopeuttaisi
todennäköisimmin ohjelman suoritusta. Tällaiset ohjelmakohdat Dalvik
kääntää konekielelle ja suorittaa konekielisinä. Ne myös tallennetaan
JIT-kääntäjän välimuistiin @@embedded(197). Androidin uudempi
ART-virtuaalikone perustuu Java-koodin Ahead-of-Time kääntämiseen
(AOT).

\todo{<<ashmem>> onko jit-cache persistoitu -- poistettu nyt}

Dalvik on ohjelmoitu C++-kielellä, mutta sen tulkki koostuu pääosin
hyvin pitkälle optimoidusta symbolisesta konekielestä, jonka avulla
minimoidaan joitakin tulkkien toteutuksille tyypillisiä
suorituskykyrasitteita @@aosp.
# todo lähde google io video?

Jos tarkastelemme Dalvikin suoritusaikaista toimintaa Java-ohjelman
ulkopuolisesta näkökulmasta, havaitsemme siis, että Dalvik viettää
ohjelman suoritusajan hieman yksinkertaistaen joko tulkissa,
JIT-kääntäjässä tai jo kääntämänsä metodin konekielisessä
ohjelmakoodissa. Lisäksi virtuaalikoneella on toki muita,
ylläpidollisia tehtäviä kuten luokkien lataaminen ja muistinhallinta.

Näiden suoritustilojen lisäksi Dalvikin
Java-natiivirajapintatoteutuksen ansiosta virtuaalikoneen prosessi
saattaa siirtyä suorittamaan valmiiksi käännettyä konekielistä
natiiviohjelmaa, palata sieltä väliaikaisesti suorittamaan
natiiviohjelman kutsumia Java-ohjelman operaatioita ja palata lopulta
takaisin ei-natiiviin suoritustilaansa. Siirtyminen normaalin
suorituksen ja natiivisuorituksen välillä vaatii virtuaalikoneelta
erityistoimenpiteitä esimerkiksi kutsukäytäntöjen yhteensovittamisen
takia. Tämän tutkielman aihe on näiden erityistoimien aiheuttamien
suorituskykyrasitteiden tarkastelu eli käytännössä
Dalvik-virtuaalikoneen suoritusaikaisen käyttäytymisen mittaaminen ja
tulosten analyysi.

# todo tuossa yllä ei ole esim optimointia, garbage collectionia, ym.

\todo{<<kappale-art-aot>>} 

* todo :noexport:
** TODO mainitse renderscript ja muut vaihtoehdot jni:lle?
