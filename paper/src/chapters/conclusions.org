Android-sovelluksia on mahdollista rakentaa yhdistelemällä Androidin
virtuaalikoneen suorittamia Java-komponentteja natiivikirjastojen
komponentteihin, jotka on käännetty suoraan suoritusympäristön
konekielelle ja joita suoritetaan virtuaalikoneen tavallisen
tulkinta- tai käännösprosessin ulkopuolella.

Jotta Java-komponentit ja natiivikomponentit voisivat kutsua toisiaan
ja käsitellä toistensa muuttujia ja tietorakenteita,
Java-virtuaalikoneet tarjoavat Java Native Interface (JNI)
-standardin, joka on vieraskutsurajapinta natiivi- ja
Java-komponenttien välillä. Myös Androidin Dalvik- ja
ART-virtuaalikoneet toteuttavat JNI-rajapinnan.

Rajapinnan käytöstä aiheutuu kuitenkin erilaisia ylimääräisiä
suorituskykyrasitteita verrattuna tavallisiin, samankielisen
komponentin sisällä tehtäviin aliohjelmakutsuihin ja
tietorakenteita käsitteleviin operaatioihin.

Tutkielmassa tarkasteltiin vasteaika- ja kutsuprofiilimittausten
avulla Androidin Dalvik-virtuaalikoneen JNI-toteutuksen
ominaispiirteitä suorituskyvyn näkökulmasta. Vasteaikamittauksissa
mitattavia JNI-operaatiota toistettiin silmukassa ja mitattiin
suorituksen kokonaisvasteaika. Lisäksi samoja operaatioita tutkittiin
näytteenottomenetelmällä, jossa prosessorin tilasta ja erityisesti
kutsupinosta otetaan tasaisin väliajoin näytteitä, joista muodostetaan
koko mittausjakson ajalta /kutsuprofiili/. Menetelmiä yhdistelemällä
saatiin selville paitsi riippuvuuksia eri parametrien ja
kokonaisvasteajan välillä, myös Dalvik-virtuaalikoneen sisäisen
toteutuksen osat, joiden kesken suoritusaika jakautui.

Virtuaalikoneen käyttäytymisestä saatiin erotettua lineaarisia
riippuvuuksia, jotka paljastivat, että virtuaalikoneen muistinhallinta
aiheuttaa välillisesti Dalvikin JNI-rajapinnan käytön merkittävimmät
rasitteet. Jokaisessa rajapinnan operaatiossa ja jokaisessa sen kautta
tehdyssä aliohjelmakutsussa on myös merkittävä yleisrasite, joten
kutsujen määrän kasvaessa vasteaika suurenee nopeasti.

Muistinhallinnan suurimmat rasitteet johtuvat siitä, että Dalvik pitää
kirjaa natiivikomponenteille välitetyistä epäsuorista viitteistä
tarkoitusta varten rakennetun taulutietorakenteen avulla. Tämä on
välttämätöntä, jotta virtuaalikoneen muistinhallinnalla säilyisi tieto
Java-suoritusympäristön ulkopuolelle välitetyistä olioviitteistä
tilanteessa, jossa roskienkeruu ja muistinhallinnan operaatiot voivat
siirrellä olioita muistiosoitteesta toiseen. Jos taas
natiivikomponentti käsittelee Java-taulukon tai merkkijonon
muistialuetta suoraan, täytyy kyseiset oliot kiinnikytkeä, mikä estää
niiden siirtämisen muistissa. Tästäkin operaatiosta syntyy
kustannuksia.

Tutkielman mittaukset tehtiin edellisen sukupolven
Android-virtuaalikoneessa Dalvikissa. Käytetty metodologia ja suurin
osa mittausohjelmistosta on kuitenkin sellaisenaan siirrettävissä
Androidin uudemmalle ART-virtuaalikoneelle. Mittausten toistaminen eri
ympäristöversioissa ja laitteissa lisäisi niiden
yleistettävyyttä. Vaikka ART-virtuaalikoneen sisäinen toteutus saattaa
erota Dalvikin toteutuksesta, samat yleiset periaatteet pätevät: suuri
osa JNI-rajapinnan rasitteista johtuu kaikissa virtuaalikoneissa hyvin
todennäköisesti automaattisen muistinhallinnan piirissä olevien
komponenttien yhdistämisestä hallitusti natiivikomponenttiin, jossa
muistinhallinta on manuaalista.

Muita mielenkiintoisia kehityskohteita olisi tutkia
kattavammin erilaisia JNI-rajapinnan parametrivaihtoehtoja:
erityisesti lokaalien ja globaalien viitteiden erottelu osoittautui
hyvin oleelliseksi tekijäksi, jota tutkielman mittauksissa ei
riittävästi tutkittu. Toinen selkeä puute mittausmenetelmissä oli
keskittyminen alkeisoperaatioiden mittaamiseen. Realistisemman ja
kokonaisvaltaisemman kuvan rajapinnan käyttäytymisestä saisi, jos
mittauskohteisiin lisättäisiin korkeamman tason
käyttötapauksia, jotka edustaisivat paremmin todellisten sovellusten
tarpeita ja joissa samassa testissä käytettäisiin useita
rajapinnan alkeisoperaatioita. Esimerkiksi suurten datamäärien
välittäminen rajapinnan välityksellä komponentista toiseen taulukko-
tai tavupuskuritietorakenteiden avulla olisi mielekäs tutkimuskohde.
Alkeisoperaatioiden tapauksessa ongelmaksi jää, että kokonaisen
ohjelman käyttäytyminen ei palaudu tyhjentävästi siinä käytettyjen
osien käyttäytymiseen, mikä johtuu esimerkiksi prosessorin välimuistin
ja ennustavien heuristiikkojen kaltaisista vaikeasti ennakoitavista
tekijöistä.

Tutkielmasta saatiin kuitenkin oleellista tietoa JNI-rajapinnan
käyttäytymisestä, mikä tiivistettiin yksinkertaiseen lineaariseen
malliin. Mallia voisi hyödyntää esimerkiksi ohjelmistoprojektissa,
jossa rajapinnan käyttöä harkitaan suorituskykyedun
tavoittelemiseksi. Vaikka konkreettisen Android-sovelluksen lopullinen
suorituskykykäyttäytyminen voidaan havaita vasta sovellusta itseään
tutkimalla, voidaan tutkielman mallin avulla saada jonkinlainen arvio
rajapinnan pullonkauloista eri
arkkitehtuurivaihtoehdoissa. Erityisesti JNI-rajapinnan patologisten
käyttötapausten välttämiseen saatiin lisävalaistusta. Sovelluksen
hyvää suorituskykyä edistää rajapintakutsujen määrän ja rajapinnan
kautta välitettyjen viiteparametrien määrän rajoittaminen sekä jonkin
verran myös natiivikomponentista Java-komponenttiin suuntautuvien
metodikutsujen välttäminen.
