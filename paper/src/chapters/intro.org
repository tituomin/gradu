/Android/ on Googlen kehittämä Linux-pohjainen käyttöjärjestelmä ja
sovellus\-ke\-hi\-tys\-a\-lus\-ta mobiililaitteille. Kuvailen ja
arvioin tutkielmassa suorituskykyisiä arkkitehtuuriratkaisuja
sellaisille Android-sovelluksille, joiden komponenteista osa on
kirjoitettu Java- ja osa C-ohjelmointikielellä.

Yleensä Android-sovellukset ohjelmoidaan /Java/-ohjelmointikielellä ja
suoritetaan Googlen Androidia varten kehittämässä
/Dalvik/-virtuaalikoneessa. Androidin Java-sovelluskehyksen
käyttäminen ei aina kuitenkaan ole kokonaisuuden kannalta paras
ratkaisu. Ensinnäkin käytettävissä saattaa olla muulla kielellä kuin
Javalla kirjoitettua ohjelmakoodia, jota halutaan hyödyntää
sellaisenaan. Toiseksi täysin uudestakin mobiilisovelluksesta halutaan
usein lähtökohtaisesti rakentaa mahdollisimman /siirrettävä/.[fn:ios]
Kolmas ja tämän tutkielman kannalta oleellisin este Androidin
Java-sovelluskehyksen käyttämiselle on sen /suorituskyky/, erityisesti
jos ohjelmisto suorittaa paljon raskasta laskentaa tai sille on
oleellisia tosiaikavaatimuksia.

[fn:ios] Esimerkiksi Applen /iOS/-käyttöjärjestelmän sovellukset
käännetään /Objective-C/ -kielestä laitteiston konekielellä
suoritettaviksi, ja alustan kehitystyökaluilla voi suoraan hyödyntää
myös C- tai C++ -kielisiä komponentteja @@ios(14). Javan lupaus
siirrettävyydestä ei realisoidu mobiilikäytössä, koska rajatuille
alustoille ei voi asentaa kielen suoritusympäristöä.
# todo lähde?

/Ohjelmistojen suorituskykytekniikka/ (/Software Performance
Engineering/, /SPE/) on ohjelmistotekniikan osa-alue, jossa
varmistetaan ohjelmistoprosessin alusta lähtien, että ohjelmistolle
asetetut suorituskykyvaatimukset täyttyvät lopullisessa
tuotteessa. Menettely on näennäisesti ristiriidassa usein lainatun
Donald Knuthin lausahduksen kanssa: "Ennenaikainen optimointi on
kaiken pahan alku ja juuri." Yleisen tulkinnan mukaan ohjelmistoa
suunniteltaessa tulisi keskittyä sen oikeaan toimivuuteen ja optimoida
suorituskykyä vasta, kun käytössä on suoritettava ohjelma. Sen
suoritusaikaista käyttäytymistä mittaamalla selvitetään, mihin
ohjelman osiin optimoinnissa kannattaa keskittyä.

Kehitysprosessin loppuvaiheessa ei kuitenkaan välttämättä enää ehdi
korjata suorituskykyongelmia, jos ne kumpuavat varhaisista valinnoista
kuten käytetyistä ohjelmointikielistä, ohjelmiston rakenteellisista
ominaisuuksista ja komponenttien väliseen kommunikaatioon liittyvistä
ratkaisuista. SPE:n keskeisiä väitteitä onkin, että ohjelmiston
makrotason /arkkitehtuurin/ suunnittelu on usein suorituskyvyn
kannalta vähintään yhtä oleellinen tekijä kuin mikrotason optimoinnit.

Tutkielmassa keskitytään siihen, mitä erityisvaatimuksia
/monikielinen/ Android-ohjelmointi asettaa sovelluksen
arkkitehtuurille suorituskykynäkökohdista. Java-kielen rinnalla
Androidia on mahdollista ohjelmoida myös käyttäen kohdealustana
laitteiston omaa natiivisuoritysympäristöä. Tällöin ohjelmointi
tapahtuu käytännössä C- tai C++ -kielillä, joista ohjelma käännetään
laitteiston prosessorin konekielelle, tällä hetkellä yleensä
ARM-konekielelle.

Menetelmän mahdollistaa Java-kielen /Java Native Interface/ -standardi
(/JNI/), joka on toteutettu myös osana
Dalvik-virtuaalikonetta. JNI-standardi on esimerkki
/vieraskutsurajapinnasta/ (/Foreign Function Interface/, /FFI/), joka
on mekanismi kahden eri ohjelmointikielillä kirjoitetun ohjelman
yhdistämiseksi.

Pelkän JNI-toteutuksen lisäksi Android-kehittäjällä on käytettävissään
/Native Development Kit/ (/NDK/)-työkalukokonaisuus. Sen
rakennusskriptit huolehtivat C- tai C++ -ohjelman kääntämisestä
laitteiston kohdearkkitehtuurille sopivaksi
kirjastobinääriksi. Lisäksi NDK sisältää joukon C-kielisiä
otsaketiedostoja ja ohjelmointirajapintoja, joiden kautta osajoukkoa
Android-alustan ominaisuuksista voidaan hyödyntää suoraan natiivista
ohjelmasta, kutsumatta Java-sovelluskehyksen rajapintoja JNI-kerroksen
kautta. Natiivitason Android-rajapinnoista ainoastaan nämä pysyvät
vakaina alustan kehittyessä. Uusissa NDK-versioissa voidaan jopa
ohjelmoida näitä rajoitettuja rajapintoja käyttävä sovellus
kokonaisuudessaan ilman Javaa.

Suorituskyvyn kannalta Androidin natiiviohjelmoinnissa keskeistä on
Java- ja natiivikomponenttien välinen kommunikaatio ja sitä kautta
myös sovelluksen kokonaisarkkitehtuuri. JNI-kutsukerroksen käyttäminen
on aina suorituskykyrasite, erityisesti kun natiivikomponentti kutsuu
Java-kom\-ponenttia. Monia haasteita liittyy myös muistinhallintaan ja
resurssien jakamiseen virtuaalikoneen hallitseman muistin ja
natiivikomponentin välillä.

Tutkielmassa käytetään SPE-arviointimenetelmiä ja
suorituskykymittauksia tutkimaan monikielisyydestä johtuvien
rasitteiden suuruusluokkia. Tutkielma sisältää kirjallisuuteen
perustuvan osuuden, jossa esitellään suorituskyvyn mallintamiseen,
arvioimiseen ja mittaamiseen käytettäviä periaatteita, metodeita sekä
työkaluja. Lisäksi lähteiden perusteella esitellään
Android-ohjelmistoalustan rakennetta suorituskyvyn näkökulmasta,
keskittyen Dalvik-virtuaalikoneeseen ja sen
JNI-toteutukseen. Tutkielman toinen osa soveltaa ensimmäisen osan
metodeja ja käsitteitä Dalvikin JNI-toteutuksen mittaamiseen ja
mallintamiseen. Analyysin perusteella tästä johdetaan yleisiä
suosituksia Androidin natiivikehityksessä tehokkaalle
sovellusarkkitehtuurille.
# todo: poista esimerkkisovellus?
