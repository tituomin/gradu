/Android/ on Googlen kehittämä Linux-pohjainen käyttöjärjestelmä ja
sovellus\-ke\-hi\-tys\-a\-lus\-ta mobiililaitteille. Tässä
tutkielmassa kuvaillaan ja arvioidaan sellaisten Android-sovellusten
suorituskykyä, joiden komponenteista osa on kirjoitettu Java- ja osa
C- tai C++-ohjelmointikielellä.

Yleensä Android-sovellukset ohjelmoidaan /Java/-ohjelmointikielellä ja
suoritetaan Googlen Androidia varten kehittämässä
virtuaalikoneessa. Androidin Java-sovellus\-kehyksen käyttäminen ei aina
kuitenkaan ole kokonaisuuden kannalta paras ratkaisu. Ensinnäkin
käytettävissä saattaa olla muulla kielellä kuin Javalla kirjoitettua
ohjelmakoodia, jota halutaan hyödyntää sellaisenaan. Toiseksi täysin
uudestakin mobiilisovelluksesta halutaan usein lähtökohtaisesti
rakentaa mahdollisimman siirrettävä.[fn:ios] Kolmas ja tämän
tutkielman kannalta oleellisin syy arvioida vaihtoehtoja Java-kielen
käytölle on suorituskyky erityisesti, jos ohjelmisto suorittaa paljon
raskasta laskentaa tai sille on oleellisia tosiaikavaatimuksia.

/Ohjelmistojen suorituskykytekniikka/ (/Software Performance
Engineering/, /SPE/) on ohjelmistotekniikan osa-alue, jossa
varmistetaan ohjelmistoprosessin alusta lähtien, että ohjelmistolle
asetetut suorituskykyvaatimukset täyttyvät lopullisessa
tuotteessa. Menettely on näennäisesti ristiriidassa usein lainatun
Donald Knuthin lausahduksen kanssa: "Ennenaikainen optimointi on
kaiken pahan alku ja juuri @@goto(268)."\hspace{6pt}Yleisen tulkinnan mukaan
ohjelmistoa suunniteltaessa tulisi keskittyä sen oikeaan toimivuuteen
ja optimoida suorituskykyä vasta, kun käytössä on suoritettava
ohjelma. Sen suoritusaikaista käyttäytymistä mittaamalla selvitetään,
mihin ohjelman osiin optimoinnissa kannattaa keskittyä.

Kehitysprosessin loppuvaiheessa ei kuitenkaan välttämättä enää ehdi
korjata suorituskykyongelmia, jos ne kumpuavat varhaisista valinnoista
kuten käytetyistä ohjelmointikielistä, ohjelmiston rakenteellisista
ominaisuuksista ja komponenttien väliseen kommunikaatioon liittyvistä
ratkaisuista. SPE:n keskeisiä väitteitä onkin, että ohjelmiston
makrotason arkkitehtuurin suunnittelu on usein suorituskyvyn kannalta
vähintään yhtä oleellinen tekijä kuin mikrotason
optimoinnit. Suorituskyvyn huomioiminen varhaisessa kehitysvaiheessa
ei toki estä lisäoptimointeja myöhäisemmässä kehitysvaiheessa.

Tutkielmassa keskitytään siihen, minkälaisia ylimääräisiä
suorituskykyrasitteita /monikielinen/ Android-ohjelmointi aiheuttaa
sovellukselle, ja voidaanko näitä rasitteita mallintaa tavalla, josta
olisi hyötyä jo varhaisessa sovelluksen kehitysvaiheessa.

Java-kielen rinnalla Androidia on mahdollista ohjelmoida myös käyttäen
kohdealustana laitteiston omaa natiivisuoritysympäristöä. Tällöin
ohjelmointi tapahtuu käytännössä C- tai C++-kielillä, joista ohjelma
käännetään laitteiston prosessorin konekielelle, tällä hetkellä
käytännössä yleensä ARM-konekielelle. Menetelmän mahdollistaa
Java-kielen /Java Native Interface/ -standardi (/JNI/), joka on
toteutettu myös osana Androidin Java-virtuaalikonetta. JNI-standardi
on esimerkki /vieraskutsurajapinnasta/ (/Foreign Function Interface/,
/FFI/), joka on mekanismi kahden eri ohjelmointikielillä kirjoitetun
ohjelman yhdistämiseksi.

Pelkän JNI-toteutuksen lisäksi Android-kehittäjällä on käytettävissään
/Native Development Kit/ (/NDK/)-työkalukokonaisuus. Sen
rakennusskriptit huolehtivat C- tai C++-ohjelman kääntämisestä
laitteiston kohdearkkitehtuurille sopivaksi
kirjastobinääriksi. Lisäksi NDK sisältää joukon C-kielisiä
otsaketiedostoja ja ohjelmointirajapintoja, joiden kautta osajoukkoa
Android-alustan ominaisuuksista voidaan hyödyntää suoraan natiivista
ohjelmasta kutsumatta Java-sovelluskehyksen rajapintoja JNI-kerroksen
kautta. Natiivitason Android-rajapinnoista ainoastaan nämä pysyvät
vakaina alustan kehittyessä. Uusissa NDK-versioissa voidaan jopa
ohjelmoida näitä rajoitettuja rajapintoja käyttävä sovellus
kokonaisuudessaan ilman Javaa.

Suorituskyvyn kannalta Androidin natiiviohjelmoinnissa keskeistä on
Java- ja natiivikomponenttien välinen kommunikaatio ja sitä kautta
myös sovelluksen kokonaisarkkitehtuuri. JNI-kutsukerroksen käyttäminen
on aina suorituskykyrasite ja erityisesti silloin, kun
natiivikomponentti kutsuu Java-kom\-ponenttia. Monia haasteita liittyy
myös muistinhallintaan ja resurssien jakamiseen virtuaalikoneen
hallitseman muistin ja natiivikomponentin välillä.

Tutkielmassa käytetään suorituskykymittauksia tutkimaan
monikielisyydestä johtuvien rasitteiden suuruusluokkia. Mittaukset
perustuvat Androidin versioon 4.1.2. Tutkielman aiheen kannalta se
tarkoittaa erityisesti, että tutkielman mittaukset ja niiden tulokset
koskevat Androidin edellisen sukupolven Dalvik-virtuaalikonetta.

Tutkielma sisältää kirjallisuuteen perustuvan osuuden, jossa
esitellään suorituskyvyn mallintamiseen, arvioimiseen ja mittaamiseen
käytettäviä periaatteita, metodeita sekä työkaluja. Lisäksi lähteiden
perusteella esitellään Android-ohjelmistoalustan rakennetta
suorituskyvyn näkökulmasta keskittyen Dalvik-virtuaalikoneeseen ja sen
JNI-toteutukseen. Tutkielman toinen osa soveltaa ensimmäisen osan
metodeja ja käsitteitä Dalvikin JNI-toteutuksen
mittaamiseen. Toteutusta mitataan kahdella toisiaan tukevalla
menetelmällä, joiden tuloksista koostetaan yksinkertainen malli
JNI-rajapinnan aiheuttaman ylimääräisen vasteajan keskeisimmistä
osatekijöistä. Mallin avulla voi saada karkean suuruusluokka-arvion
rajapinnan käyttämisen kustannuksista erilaisissa tilanteissa.

Tutkielman tavoite on saada selville, voiko Androidin virtuaalikoneen
natiivirajapinnan toteutuksen suorituskäyttäytymistä mittaamalla
löytää riippuvuuksia ja lainalaisuuksia, joista olisi hyötyä
varhaisessa kehitysvaiheessa olevan monikielisen sovelluksen
suunnittelussa sellaiseksi, että se käyttäisi natiivirajapintaa
suorituskyvyn kannalta optimaalisella tavalla.

# todo: poista esimerkkisovellus? 

[fn:ios] Esimerkiksi Applen /iOS/-käyttöjärjestelmän sovellukset
käännetään /Objective-C/- tai /Swift/ -kielestä laitteiston konekielellä
suoritettaviksi, ja alustan kehitystyökaluilla voi suoraan hyödyntää
myös C- tai C++-kielisiä komponentteja @@ios(14). Javan lupaus
siirrettävyydestä ei realisoidu mobiilikäytössä, koska valmistajien
kontrolloimiin järjestelmiin ei voi asentaa vaihtoehtoisia
suoritusympäristöjä.
# todo lähde?
