\label{sec-jni}

Kaikki Android-järjestelmään asennettavat tavalliset sovellukset
suoritetaan omassa prosessissaan Dalvik-virtuaalikoneessa, vaikka ne
sisältäisivätkin natiivikomponentteja.  Tutkimusten mukaan
@@benchmark-ndk @@kicheol-bad @@eval-android-ndk natiivikomponenttien
käytöstä joskus todella on suorituskykyetua: koska Java-ohjelmaa
suoritetaan välikielelle käännettynä virtuaalikoneessa, seuraa tästä
yleisrasitteita verrattuna suoraan konekielellä suoritettavaan
ohjelmaan.  Kuinka siis korkean tason kielestä on mahdollista siirtyä
suorittamaan konekielistä ohjelmaa?
# todo tähän kerää kaikki mittaukset aiheesta
# lisäksi luokittele rasitteiden syyt

* Java Native Interface ja vieraskutsurajapinnat
/Vieraskutsurajapinta/ (/Foreign Function Interface/) on rajapinta,
jonka kautta korkean tason ohjelmointikielestä käsin voidaan kutsua
matalan tason kielellä ohjelmoituja aliohjelmia @@jeannie. Java Native
Interface on tällaisen vieraskutsurajapinnan spesifikaatio @@jnibook.

Minimaalisin mahdollinen vieraskutsurajapinta mahdollistaa matalan
tason aliohjelmien kutsumisen ja mekanismin, jolla korkean tason datan
esitysmuodot voidaan muuttaa matalan tason esitysmuotoihin ja
päinvastoin @@reppy(49). JNI tarjoaa lisäksi takaisinkutsumekanismin,
jonka avulla natiiviohjelmasta voi kutsua Java-ohjelman metodeja sekä
käsitellä Java-ohjelman dataa @@jnibook(41).

\begin{figure}[h!]  \centerline{
\includegraphics[scale=1]{figures/jni-basic.pdf}
}\caption{Natiivirajapinnan asema
\cite[s. 5]{jnibook}}\label{fig:jnibasic}
\end{figure}

Kuva \ref{fig:jnibasic} antaa kokonaiskäsityksen JNI:n
roolista. Sovelluksen kokonaisuuden kannalta Javan natiivirajapinta
tukee kahdenlaista integraatiota natiivikomponentin ja virtuaalikoneen
välillä. Ensimmäisessä vaihtoehdossa suorituksen pääkontrolli on
Java-kielisellä sovelluksella, joka kutsuu ajoittain
/natiivikirjaston/ tarjoamia palveluita @@jnibook(5). Toisessa
vaihtoehdossa pääsovellus toteutetaan matalan tason kielellä ja
sovellukseen /upotetaan/ Java-virtuaalikone, jonka avulla sovellus voi
suorittaa Java-kielisiä ohjelmia.

Android-sovellukset ovat lähtökohtaisesti Java-kielisiä, joten
ainoastaan ensimmäinen integraatiomekanismi on käytettävissä
sovellusohjelmoijalle. Natiivikomponentit toteutetaan siis
/dynaamisesti linkitettävinä kirjastoina/, jotka Dalvik-virtuaalikone
lataa Java-ohjelman käyttöön.

# todo: mainitse java-c-spesifit tehtävät vielä toisessa listassa

# lähteet jeannie ja reppy
# vaihtoehdot jni:lle androidissa?

* Natiivirajapinnan suunnitteluperiaatteet

# Natiivilla suoritustasolla virtuaalikoneen vieraskutsurajapinnan
# toteutus huolehtii kielten mahdollisesti erilaisten kutsukäytäntöjen
# yhteensovittamisesta sekä kutsuparametrien ja palautusarvojen
# muuntamisesta lähdekielen tyypeistä kohdekielen hyödynnettävissä
# olevaan muotoon ja päin vastoin.

Javan natiivirajapinnan suunnittelussa on tavoiteltu tasapainoa kahden
keskenään ristiriitaisen vaatimuksen kanssa
@@jnibook(145--146). Toinen on /binääriyhteensopivuus/: saman
binäärimuotoisen natiivikirjaston tulee toimia eri virtuaalikoneiden
kanssa ilman uudelleenkääntämistä.  Tämän vuoksi JNI ei voi tehdä
mitään oletuksia virtuaalikoneen sisäisestä toteutuksesta. Periaate on
tärkeä ennen kaikkea siksi, että virtuaalikoneen on aina kyettävä
järjestämään uudelleen omia tietorakenteitaan esimerkiksi
automaattisen muistinhallinnan, JIT-kääntämisen ja erilaisten
optimointien toteuttamiseksi. JNI:tä edeltänyt varhainen Javan
natiivirajapintatoteutus oli suoraviivaisempi ja asettikin rajoituksia
virtuaalikoneen roskienkeruualgoritmeille @@jnibook(8).

Yhteensopivuuden vaatimus on ristiriidassa toisen keskeisen
vaatimuksen, /hyvän suorituskyvyn/ kanssa. Yhteensopivuus on
mahdollista saavuttaa ainoastaan piilottamalla virtuaalikoneen
tietorakenteet natiiviohjelmalta rajapinnan taakse. Sen sijaan, että
C-kieliselle natiiviohjelmalle välitettäisiin esimerkiksi suoraan
osoitin Java-taulukon toteutukseen, natiiviohjelma lukee taulukon
alkioita aina natiivirajapinnan apufunktioiden kautta. Yksinkertaisen
taulukkotietorakenteenkin käsittely natiivikoodissa edellyttää siis
useita kutsuja JNI:n tarjoaman rajapinnan kautta.

# todo begin poistetaanko kappale?

Yhdessä suhteessa Javan natiivirajapinta ei ole toteutusriippumaton:
se ei kykene estämään synkronointiongelmia tilanteessa, jossa
virtuaalikone ja natiivikomponentti käyttävät eri säietoteutuksia
@@jnibook(97--98). Onnistunut rajapinnan ylittävä säikeiden
koordinointi edellyttääkin, että virtuaalikoneen säikeet käyttävät
perustanaan natiivialustan säikeitä. Dalvikin tapauksessa näin onkin
@@jnitips; kannattaa huomata, että natiivimetodit suoritetaan aina
samassa virtuaalikoneen prosessissa ja säikeessä, joka natiivikutsun
suorittaa.

# todo end

# todo tarkista vielä lähteestä

* Natiivirajapinta sovellusohjelmoijan näkökulmasta
# todo tuo otsikko huono

Java-sovellus voi JNI:n avulla kutsua C- tai C++-kielellä toteutettuja
natiiveja aliohjelmia ja vastaavasti natiiviohjelma voi kutsua
Java-ohjelman metodeita ja käyttää sen tietorakenteita. 

/Java-kieli/ tarjoaa ohjelmoijalle
- varatun sanan ~native~, jolla voi esitellä /natiivimetodeja/
  antamatta niille toteutusta sekä
- järjestelmäkutsun ~System.loadLibrary~, jolla ladataan
  natiivikirjasto, joka sisältää natiivimetodien toteutukset.

Näitä mekanismeja käytettyään ohjelmoija voi kutsua natiivimetodeja
aivan kuten tavallisiakin metodeja. Natiivimetodien parametrien ja
paluuarvojen tyyppeinä on käytettävä Java-tyyppejä.

C-funktioita edustavat natiivimetodit ovat natiivikoodin /ainoita/
kielen tasolla tuettuja vastinpareja Java-ohjelmassa. Vaikkapa
C-kielen tietueita tai C++-kielen olioita ei voi käsitellä ja välittää
arvoina tai osoitinarvoina Java-kielessä. Eräs tapa säilyttää
Java-ohjelmassa viite natiivitietorakenteeseen onkin sen osoitteen
tallentaminen ~long~-kenttään; osoitteen tulkitseminen osoitteeksi on
tietenkin mahdollista ainoastaan natiivikoodissa @@jnibook(123--130).

Käytännössä suurin osa JNI:n edellyttämästä integraatiokoodista
toteutetaan matalan tason kielellä. /C-ohjelmoijalle/
Java-virtuaalikone -- sekä Dalvik -- tarjoaakin laajan rajapinnan,
jonka funktioiden avulla C-ohjelmoija voi monipuolisesti käsitellä
Java-ohjelman tietorakenteita. Rajapinta myös määrittelee, mitä
C-kielen primitiivityyppejä Javan primitiivityypit vastavaat, joten
natiivimetodille välitettyjä primitiivityyppisiä parametreja voi
C-kielessä käsitellä suoraan.

Lisäksi merkittävä osa JNI-rajapinnasta koostuu erilaisista viitteiden
ja nimien hallintaan liittyvistä apufunktioista, joita tarvitaan
kielten erilaisten suoritusympäristöjen yhteensovittamiseksi.

Natiivirajapinnan käyttö C++-kielellä ei oleellisesti eroa sen
käytöstä C-kielellä eikä suorituskykyeroa tapausten välillä ole, sillä
molemmat käyttävät täsmälleen samaa virtuaalikoneen JNI-toteutusta
@@jnibook(106). Tutkielmassa käsitellään rajapinnan C-kielistä
versiota.

# todo here

** Natiivimetodien käyttöönotto

Käytännössä nativiikirjasto otetaan Java-sovelluksen käyttöön
seuraavasti. Natiivimetodi esitellään Java-kielessä luokan sisällä,
kuten tavallista, mutta metodin määreeksi lisätään varattu sana
~native~. Esittely riittää, eikä metodille anneta toteutusta
Java-luokan sisällä. Seuraava esimerkki kuvaa tilannetta
@@jnibook(13).
# lähde embedded

#+begin_src java -r
class NativeExample {

    private native void print(int num); (*@\ding{202}@*)

    public static void main(String[] args) {
        new NativeExample().print(5);
    }

    static {
        System.loadLibrary("native_example"); (*@\ding{203}@*)
    }
}
#+end_src

Natiivimetodin ~print~ \ding{202} toteutus kuuluu kirjastoon
~native_example~, joka on ladattava erillisellä ~System.loadLibrary~
-kutsulla \ding{203}.  Tässä lataaminen tapahtuu /staattisessa
alustuslohkossa/ luokan ~NativeExample~ lataamisen yhteydessä.
# todo ennen vai yhteydessä

Javan käännöstyökalut tulostavat natiivimetodeja sisältävän
luokkamäärittelyn perusteella C-otsaketiedoston, joka sisältää
natiivimetodia vastaavan C-kielisen funktion esittelyn. Tästä
huolehtii komento ~javah -jni NativeExample~, joka ottaa syötteekseen
luokkatiedoston. Natiivimetodia ~print~ vastaavan funktion esittely
näyttää C-kielessä seuraavalta.

#+begin_src c 
JNIEXPORT void JNICALL
Java_NativeExample_print (JNIEnv *, jobject, jint);
#+end_src
# jnienv: kuva sivulta 23 jnibook
Funktiomäärityksen ~JNIEXPORT~- ja ~JNICALL~ -makrot piilottavat
natiivimetoditoteutusten kutsu- ja linkityskäytäntöjen mahdolliset
yksityiskohdat @@jnibook(170). Automaattisesti generoitu metodinimi
~Java_NativeExample_print~ takaa, että virtuaalikone osaa kytkeä
toteutuksen ~NativeExample~-luokan ~print~-natiivimetodiin. Jos tätä
nimeämiskäytäntöä ei halua noudattaa, tai toteutuksia täytyy voida
vaihtaa ajonaikaisesti, voi natiivimetodeita rekisteröidä joustavammin
rajapinnan tarjoamalla ~RegisterNatives~-funktiolla
@@jnibook(101--102).

Funktion ~print~ kutsuparametreista ensimmäinen, ~JNIEnv *~ -tyyppinen
parametri välitetään kaikkiin natiivimetodeihin. Se on osoitin, josta
on pääsy virtuaalikoneen suorituskontekstia edustavaan tietueeseen,
joka myös sisältää natiivirajapinnan kaikki palvelut
funktio-osoittimien muodossa.

Koska ~print~ on ilmentymämetodi, on toisen parametrin tyyppi
~jobject~. Parametri vastaa Java-kielen ilmentymämetodien
implisiittistä ~this~-viitettä luokan kulloiseenkin ilmentymään.
Luokkametodin tapauksessa natiivifunktio saisi vastaavasti luokkaa
edustavan ~jclass~-tyyppisen parametrin. Loput funktion parametreista
ovat vastinpareja natiivimetodille määritellyille parametreille:
~jint~ vastaa Javan primitiivityyppiä ~int~.

Lopuksi natiivifunktiolle on vielä kirjoitettava toteutus C- tai
C++-kielellä ja käännettävä toteutuskoodi osaksi dynaamisesti
ladattavaa kirjastoa. Androidin tapauksessa tämä käännösvaihe
edellyttää /ristiinkääntämistä/ (/cross compiling/), koska
kohdelaitteiston ARM-suoritin ja suoritusympäristö eroavat
kehitysympäristön vastaavista. Käännösvaiheesta yksityiskohtineen
huolehtivat Androidin Native Development Kit -rakennusskriptit
komentorivikäskyllä ~ndk-build~. Lopputulos on Java-ohjelma, joka voi
kutsua natiivimetodia aivan kuten tavallista Java-metodia.

# todo käännös ristiinkääntäminen? parempi käännös?
# todo: lisää tähän c++-eroavaisuudet # todo: mainitse Android.mk?
# todo: mainitse jni.h, ym.

Natiivimetodin esittelyn lisäksi kaikki varsinainen JNI-ohjelmointi
tapahtuu natiivikielen puolella. Seuraavaksi esitellään oleelliset
tietotyypit ja palvelut, joiden avulla nativiimetodit totetutetaan.

** Tietotyypit
C-kielestä on voitava käsitellä kaikkia Javan tietotyyppejä. Javan
tyypit kuvautuvat C- ja C++-tyypeille seuraavan taulukon mukaisesti
@@jnibook(166).

# todo suomennos opaque reference

#+CAPTION: Tyypit
#+LABEL: tab-primitives
| Java      | C               | bittejä | etumerkki |
|-----------+-----------------+---------+-----------|
| ~boolean~ | ~jboolean~      |       8 | ei        |
| ~byte~    | ~jbyte~         |       8 | kyllä     |
| ~char~    | ~jchar~         |      16 | ei        |
| ~short~   | ~jshort~        |      16 | kyllä     |
| ~int~     | ~jint~, ~jsize~ |      32 | kyllä     |
| ~long~    | ~jlong~         |      64 | kyllä     |
|-----------+-----------------+---------+-----------|
| ~float~   | ~jfloat~        |      32 | ---       |
| ~double~  | ~jdouble~       |      64 | ---       |
|-----------+-----------------+---------+-----------|
| ~Object~  | ~jobject~       |       ? | ---       |
|-----------+-----------------+---------+-----------|

C-kieliset tyyppinimet ovat peräisin
~jni.h~-otsaketiedostosta. Natiivimetodien primitiiviparametrien arvot
ja primitiivityyppiset paluuarvot välitetään natiivirajapinnan yli
kopioimalla.

# todo selvennä mitä kutsukäytännöt tarkoittavat

Viitetyyppiset parametrit sitä vastoin välitetään kopioimalla
~jobject~-tyyppinen osoitinparametri. Parametri ei osoita suoraan
virtuaalikoneen oliotietorakenteeseen, vaan oliota /edustavaan/,
JNI-toteutuksen hallitsemaan tietorakenteeseen. Tällaista
osoitinparametria voi käyttää ainoastaan välittämällä se parametriksi
JNI:n apufunktioille -- osoitinta ei koskaan suoraan ~dereferencata~
natiivikomponentissa.

# todo dereference suomeksi

C-kielessä ~jobject~-tyypille on tyyppimäärittelyillä annettu joukko
aliaksia, joten käytännössä yleisimmille Java-tyypeille on omat
tyyppinimensä C-ohjelmassa: luokkatyypille, merkkijonotyypille,
erityyppisille taulukoille sekä ~Throwable~ -tyypille.

# C++-natiivikoodia varten JNI määrittelee myös näiden tyyppien
# keskinäiset perintäsuhteet käännösaikaista tyyppitarkistusta varten.

# todo yllä takaisin?

# todo selvennä perintäsuhteet

** Oliot ja luokat
# todo: selitä itse tekstissä että metodi on ainoa java->c-integraatio-
# menetelmä
Olioiden ja luokkien kenttien käsittely ja metodien kutsuminen
muistuttaa epäsuoruudessaan Java-kielen
reflektiorajapintaa. Esimerkiksi olion ilmentymämetodia kutsutaan
kolmessa vaihessa seuraavasti.

Aluksi haetaan viite olion luokkaan funktiolla ~GetObjectClass~:
#+begin_src c
jclass GetObjectClass(JNIEnv *env, jobject obj);
#+end_src

Sitten luokasta haetaan metodin tunniste metodin nimen ja tyypin
perusteella funktiolla ~GetMethodId~.
# lähde

#+begin_src c
jmethodID
GetMethodID(JNIEnv *env, jclass clazz, const char *name, const char *signature);
#+end_src

Etsittävän metodin tyypin ilmaisee merkkijonoparametri ~signature~,
joka noudattaa JVM-tyyppisyntaksia @@jnibook(48). Esimerkiksi
kokonaisluvun palauttavan ja kaksi merkkijonoa parametreinaan ottavan
metodin tyyppimääritys on ~(Ljava/lang/StringLjava/lang/String])I~.

Vasta lopuksi metodia varsinaisesti /kutsutaan/ funktiolla
\verb|Call|\tau\verb|Method|. Funktiosta on oma versionsa jokaiselle
mahdolliselle paluuarvon tyypille, joten varsinaisen funktion nimi
saadaan korvaamalla symboli \tau taulukon \ref{tab-primitives}
ensimmäisen sarakkeen sisällöllä. Esimerkiksi kokonaisluvun
palauttavaa Java-metodia kutsutaan seuraavalla funktiolla.

#+begin_src c
jint CallIntMethod(JNIEnv *env, jobject obj, jmethodID methodID, ...);
#+end_src

# todo kokonaiskoodi (ei declaraatiot)
Vastaava prosessi vaaditaan olion kenttien
läpikäymiseen. Kokonaisuudessaan ~sum~-nimisen Java-metodin kutsuminen
natiivimetodista käsin voisi näyttää seuraavalta:

#+begin_src c
#include <jni.h>

JNIEXPORT void JNICALL
Java_CallBackExample_callsum (JNIEnv *env, jobject receiver_object, jint num) {

    jclass receiver_class = (*env)->GetObjectClass(env, receiver_object);

    jmethodID sum_method_id =
        (*env)->GetMethodID(env, receiver_class, "sum", "(II)I");

    jint result =
        (*env)->CallIntMethod(env, receiver_class, sum_method_id, num, 5);

    ...
}

#+end_src

Metodin tai kentän etsiminen symbolisen nimen ja tyyppimäärityksen
perusteella on raskas operaatio käytettäväksi toistuvasti silmukassa
@@jnibook(56--57). Siksi natiiviohjelmaa suositellaan säilyttämään
metodien ja kenttien tunnisteet natiivimuuttujissa, mikä
ihanteellisesti tapahtuu, kun Java-luokka ladataan.

Alkuperäisessä natiivirajapinnan spesifikaatiossa arvioidaan, että
tunnisteiden tallentamisesta huolimatta takaisinkutsurajapinnan
käyttäminen on tyypillisissä toteutuksissa hitaampaa kuin
natiivimetodien kutsuminen Javasta juuri funktiokutsujen epäsuoruuden
takia ja siksi, ettei tätä käyttötapausta yleensä ole optimoitu
@@jnibook(58). Dalvikin tapauksessa todelliset suorituskykytulokset
tulevat nähtäväksi mittausten myötä.

** Merkkijonot ja taulukot
Ohjelmointityössä ehkä yleisimpien tietotyyppien, merkkijonojen ja
taulukoiden, käyttäminen edellyttää kaikkien tietorakenteita
hyödyntävien operaatioiden kutsumista ~JNIEnv~-rajapintafunktioiden
kautta. Näistä apufunktioista on kuitenkin erilaisia versioita, joiden
reunaehdot suorituskyvyn suhteen eroavat toisistaan @@jnibook(24--40).

Merkkijonoihin pääsee käsiksi kahdella tavalla. Ensimmäisessä
JNI-funktio palauttaa osoittimen virtuaalikoneen hallitsemaan
yhtenäiseen muistialueeseen, joka sisältää merkkijonon. Toinen tapa
perustuu funktioihin, jotka kopioivat merkkijonon merkit
natiivipuolella allokoituun muistialueeseen, esimerkiksi paikalliseen
muuttujaan.

C-kielinen ohjelma saa /osoittimen/ 16-bittisen Unicode-merkkijonon
sisältöön seuraavalla funktiolla.

#+begin_src c
const jchar* GetStringChars(JNIEnv* env, jstring string, jboolean* is_copy);
#+end_src

Paremetri ~jstring string~ on merkkijonoviite, joka on aiemmin välitetty
natiivifunktiolle parametrina. Parametriin ~jboolean is_copy~
tallentuu tieto, johtiko operaatio kopioimiseen. Merkkijonoresurssi on
aina lopuksi vapautettava eksplisiittisellä kutsulla, mikä pätee myös
Java-taulukoille:

\todo{<<GetStringChars>>}

#+begin_src c
(*env)->ReleaseStringChars(JNIEnv* env, jstring string, jchar *cstr);
#+end_src

JNI-spesifikaatio kuitenkin sallii virtuaalikoneen luoda merkkijonon
sisällöstä uuden kopion ja palauttaa osoittimen siihen. Osoittimen
palauttavista merkkijonofunktioista on olemassa versiot, jotka
kytkevät väliaikaisesti roskienkeruun pois päältä, jolloin kopioimisen
tarve todennäköisesti katoaa. Näiden versioiden käyttö edellyttää
kuitenkin, ettei natiivikoodi suoraan tai välillisesti siirry
odottamaan minkäänlaista synkronisoitua resurssia.

/Kopioivien/ funktioiden käytöstä on JNI-dokumentaation mukaan
suorituskykyetua erityisesti lyhyiden merkkijonojen tapauksessa, koska
puskurin allokoinnin yleisrasite erityisesti natiivipinosta on
mitätön, samoin kuin pienen merkkimäärän kopioinnin @@jnibook(31).

Dalvik-virtuaalikone tukee olioiden kiinnikytkemistä (/pinning/) eli
sulkemista roskienkeruun ulkopuolelle @@aosp. Periaatteessa tämän
pitäisi estää osoittimiin perustuvista merkkijono-operaatioista
aiheutuvat muistinvaraus- ja
kopiointikustannukset. Android-dokumentaation mukaan
kopiointikustannuksia syntyy lähinnä, jos Dalvikin sisäisestä
16-bittisestä Unicode-merkkijono\-to\-teu\-tuk\-ses\-ta siirrytään
UTF-8 -koodattuun merkkijonoon @@jnitips; lähes kaikista
JNI-merkkijonofunktioista on sekä Unicode- että
UTF-versiot. Dalvik-virtuaalikoneen natiivirajapinnan
merkkijono-operaatioiden suorituskyvyn tarkempi analyysi vaatii
kuitenkin mittauksia ja virtuaalikoneen toteutuksen tutkimista.

Yleisestikin suorituskykyvaatimukset usein edellyttävät abstraktien
rajapintojen piilottamien toteutusyksityiskohtien paljastamista --
ainakin dokumentaatiossa.
# lähde http://developer.android.com/training/articles/perf-jni.html
# todo: joku lähde tuohon abstrakti rajapinta vs. toteutus

Primitiivialkioita sisältävien taulukoiden käsittely on täysin
analogista merkkijonojen käsittelyn kanssa. Primitiivialkiot voi
kopioida suoraan natiivipuskuriin, tai alkioiden muistialueelle
virtuaalikoneeseen voi pyytää osoittimen. Sen sijaan olioalkioita
sisältäviä taulukoita ei voi käsitellä kokonaisuuksina
natiivipuolelta, vaan JNI sallii pääsyn vain yksittäiseen alkioon
kerrallaan palauttaen siihen ~jobject~ -tyyppisen viitteen.

* Muistinhallinta natiiviohjelmoinnissa
Kuten merkkijono-operaatioista huomataan, natiivirajapinnan
perushaaste on sovittaa yhteen osapuolten erilaiset
muistinhallintamenetelmät. Java-komponentti hyödyntää virtuaalikoneen
automaattista roskienkeruuta, kun taas natiivikomponentin
muistinhallinta on manuaalista. Tämä aiheuttaisi ongelmia, jos
toisella puolella rajapintaa allokoidun tietorakenteen rajallinen
elinkaari estäisi toisella puolella tapahtuvan rakenteen käsittelyn.

Primitiivityyppisten parametrien arvot välitetään rajapinnan yli
kopioimalla, joten ongelmaksi jäävät viitteet allokoituihin
rakenteisiin. Viitetyyppiset parametrit kuten taulukot ja
olioinstanssit välitetään natiivikomponentille JNI-osoitintyyppien
muodossa @@jnibook(23). Jos Java-ohjelmaan ei jää viitteitä olioon,
josta välitetään viite natiivipuolelle, saattaisi virtuaalikoneen
roskienkeräys poistaa olion. JNI:ssä tämä on estetty: oletuksena
oliosta välitetään /paikallinen viite/ (/local reference/), jonka
voimassaolo taataan natiivimetodin kutsun ajaksi. Viitearvojen
pidempiaikainen säilyttäminen edellyttää natiiviohjelmoijalta
eksplisiittistä /globaalien/ viitteiden luomista ja vapauttamista
natiivirajapinnan funktioiden avulla.
# todo: korjaa, ei elinkaaren ajaksi vaan jotkut vaativat myös
# eksplisiittiset lopetuskutsut

Eräs tapa integroida natiivikomponentti Java-koodiin on luoda
natiivimetodeita sisältävä Java-luokka, jonka instanssit ovat
/vertaisolioita/ (/peer object/) @@jnibook(123--130). Vertaisolio
edustaa jotain yksittäistä natiivipuolen resurssia, tietorakennetta
tai olioinstanssia. Tällöin natiiviresurssista on tallennettava
implisiittinen viite, kuten muistiosoite, vertaisluokan yksityiseen
kenttään. Vertaisolion konstruktorista voidaan kutsua natiivimetodia,
joka vastaa natiiviresurssin luomisesta, esimekiksi
muistinvarauksista, mutta vertaisolion käyttäjän on yleensä itse
eksplisiittisesti kutsuttava natiivimetodia, joka vapauttaa
natiiviresurssin @@jnibook(125--126). Muussa tapauksessa roskienkeruu
poistaisi vertaisolion, kun siihen ei enää ole viitteitä, mutta
jäljelle jäänyt natiiviresurssi aiheuttaisi muistivuodon.

# todo: onko finalize  tarpeen joskus?
# todo: edustaolio vs. peer object

JNI ei tarjoa automaattista tukea edustaluokkien tekemiseen
natiivitietorakenteille, vaan ohjelmoijan on itse määriteltävä
sidonnat Java-luokan metodeihin.
# todo määrittele tarkemmin


Koska JNI-spesifikaatio ei ota kantaa virtuaalikoneen sisäiseen
toteutukseen, se ei myöskään sanele, miten virtuaalikoneen tulee
toteuttaa spesifikaation määräämät takuut tietorakenteiden
elinkaarille.  Dalvik-virtuaalikoneen muistinhallinta tukee
allokoitujen kohteiden /kiinnikytkemistä/ (/pinning/) eli niiden
roskienkeruun estämistä @@aosp, mutta JNI sallii virtuaalikoneen myös
/kopioida/ kohteen arvon natiivikomponenttia varten. Tästä seuraisi
merkittäviä suorituskykyrasitteita, mitä kysymystä tutkimme
myöhemmässä vaiheessa.
# todo: huom ! tämän takia yksittäiset olioviitteet pitää yksitellen poimia
# taulukoista ? (check)

# todo : allokointi suomeksi?

# entäs threadit?

** Viitteiden hallinta ja olioiden elinkaari
Erityistapauksissa natiiviohjelmoinnin muistinhallinta edellyttää
natiiviohjelman sisältämien erityyppisten Java-viitteiden
eksplisiittistä hallintaa. Natiivirajapinta tarjoaa
natiivikomponentille kolmentyyppisiä viitteitä virtuaalikoneen
olioihin: /paikallisia viitteitä/, /globaaleja viitteitä/ ja /heikkoja
globaaleja viitteitä/ (/local references/, /global references/, /weak
global references/).

Kuten mainittu, JNI:n palauttamat suorat osoittimet virtuaalikoneen
merkkijonoihin ja taulukoihin tulee aina eksplisiittisesti myös
vapauttaa, jotta niiden virtuaalikoneessa käyttämät muistialueet
voidaan vapauttaa. Oletuksena kaikki muut olioviitteet, jotka JNI
antaa natiiviohjelman käyttöön, ovat paikallisia viitteitä: niitä ei
/yleensä/ tarvitse manuaalisesti vapauttaa, sillä niiden elinkaari on
automaattisesti sidottu natiivimetodin kutsun alkamiseen ja
päättymiseen @@jnibook(62). Niiden käyttö ei ole
säieturvallista. Globaalit viitteet on eksplisiittisesti luotava
~NewGlobalRef~-kutsulla; ne estävät olion roskienkeruun ja
mahdollistavat olioihin viittaamisen yli eri natiivimetodien kutsujen
myös eri säikeistä.

JNI:n ohjelmoijalta edellyttämä eksplisiittinen viitteidenhallinta ja
virtuaalikoneen varaamasta muistista huolehtiminen tarkoittaa, että
ohjelmoija on vastuussa muistinkäytön tehokkuudesta ja muistivuotojen
välttämisestä. Erilaisilla viitteidenhallintastrategioilla on
potentiaalisesti myös erilaisia rasitteita, jotka näkyvät
vaste\-ajoissa. Virtuaalikoneen suorittama roskienkeruukin on osa
ohjelman suoritusaikaa, ja käytetyt viitetyypit vaikuttavat siihen,
milloin roskienkeruuta voidaan suorittaa.

Paikalliset viitteet eivät vaadi roskienkeruuta, mutta sisältävät
nekin omat rasitteensa. JNI-spesifikaatio tarjoaa niiden
eksplisiittiseen hallintaan funktioparin ~PushLocalFrame~ ja
~PopLocalFrame~, joita väitetään tehokkaaksi tavaksi hallita lokaaleja
viitteitä useampi viite kerrallaan @@jnibook(68). Yhden natiivimetodin
kutsuhan voi siirtää ohjelman suorituksen pitkäksikin aikaa syvälle
natiivikomponenttiin, joten kyseinen metodikutsu saattaa pitää
paikallisten viitteiden edellyttämät muistivaraukset käytössä hyvinkin
pitkään, ellei viitteitä erikseen vapauteta.

* Natiivirajapinnan suorituskykyrasitteista
Ennakoimme, että natiivirajapinnan ylittäminen voi aiheuttaa
ylimääräisiä suorituskykyrasitteita aivan tavallisissa
laskentatehtävissä kuten merkkijonojen ja taulukoiden käsittelyssä,
olioiden kenttien ja metodien käyttämisessä sekä natiivimetodien
kutsumisessa Java-ohjelmasta käsin. Rasitteet voivat aiheutua Java- ja
natiivialiohjelmien erilaisista kutsukäytännöistä, menetelmistä kuroa
umpeen eroja natiivikielten ja virtuaalikoneen muistinhallinnassa,
operaatioiden edellyttämästä rajapintakutsujen määristä sekä
JNI-operaatiossa toistuvasta osoittimien käytöstä. Seuraavaksi
paneudumme tarkemmin Dalvik-virtuaalikoneen toteutukseen, mittaamme
eri natiivioperaatioiden suorituskykyä eri parametreilla ja luomme
tuloksista malleja Javan natiivirajapinnan tehokkaalle hyödyntämiselle
Android-sovelluksissa.

# mainitse jossain virheistä
