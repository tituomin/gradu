Tässä luvussa esitellään kerätyt mittaustulokset ja koostetaan niistä
alustavat havainnot. Myös mittausten ulkopuolelle jätetyt operaatiot
mainitaan perusteluineen. Mittauskohteet on luokiteltu
aihepiireittäin.

# TODO metodisignaturet lisää alle?

* Metodien ja funktioiden kutsuminen
Mittausten kannalta keskiössä ovat JNI-natiivirajapinnan kautta
tehtävät aliohjelmakutsut erityyppisillä parametreilla.

Operaatiot suunnassa C \rightarrow Java ovat
1. \verb|Call|\tau\verb|Method|,
2. \verb|CallNonVirtual|\tau\verb|Method| ja
3. \verb|CallStatic|\tau\verb|Method|.

Operaatioista (1) huomioi olion luokkahierarkian eli kutsu sidotaan
oikeaan luokkaan dynaamisesti kuten Javan metodikutsussa. Sen sijaan
(2) kutsuu aina eksplisiittisesti määritellyn luokan metodia. (3)
kutsuu staattista metodia. Variaatioita (1)-(3) vertaillaan
mittauksissa.

Metodien kutsuminen edellyttää aina metoditunnuksen noutamista
~GetMethodID~- ja ~GetStaticMethodID~-kutsuilla. Kuten suositeltu,
palveluita ei mittauksissa kutsuta joka kerta jokaisen metodikutsun
yhteydessä vaan kerran koko mittausta käynnistettäessä.

Vastinpari suunnassa Java \rightarrow C on ~native~ -metodin
kutsuminen Javasta eli C-ohjelmassa olevan funktion
kutsuminen. Variaatioille (1)--(2) ei ole vastinetta C-kielessä, mutta
~native~-metodin voi merkitä staattiseksi (3). Vastinpari suunnassa
Java \rightarrow Java on tavallinen metodikutsu. Vastinpari suunnassa C
\rightarrow C on tavallinen funktiokutsu.

{{{plot(basic-call-int-fit)}}}
{{{plot(basic-call-Object-fit)}}}

Kaikissa tuloksissa ja kaikissa permutaatioissa /vasteaika on
lineaarisesti riippuvainen parametrien määrästä/. Kuitenkin
/viitetyyppisillä parametreilla riippuvuuden kulmakerroin on
suurempi/, eli viitetyyppisen parametrin käsittely näkyy tuloksissa
keskeisenä suorituskykyrasitteena. Tätä havainnollistavat kuvat
\ref{fig:basic-call-int-fit} ja \ref{fig:basic-call-Object-fit},
joissa parametrityyppeinä on ~int~ ja ~Object~.

Kuvissa näkyvät kaikki kutsusuuntien permutaatiot, joten niistä voi
myös hahmottaa eri kutsusuuntien vasteaikojen suhteellisia
eroja. Kuten kohdassa \ref{ref:jni-book-estimate} arvioitiin,
Dalvikissakin /kutsut suunnassa {{{permu(Java,C)}}} ovat selvästi
päinvastaista suuntaa nopeampia/: edellisten vasteajat suhteessa
jälkimmäisten aikoihin ovat noin kolminkertaisia. Tämä pätee kaikilla
parametrityypeillä.

Sen sijaan samankielisten suuntien ({{{permu(Java,Java)}}}) sekä
({{{permu(C,C)}}}) välisestä erosta ei tämän mittauksen perusteella
voi tehdä pitkälle meneviä johtopäätöksiä muun muassa siksi, että
mittausteknisistä syistä Java-lähtösilmukoihin on jouduttu lisäämään
sivuvaikutuksellisia operaatioita, joita ei C-kielisissä silmukoissa
tarvita, koska C-kääntäjästä on kytketty tarpeettoman koodin
optimointi pois päältä. Näissäkin kutsusuunnissa vasteaika on
kuitenkin lineaarisesti riippuvainen parametrimäärästä, vaikka näin
pienillä vasteajoilla mittaushäiriöt ovat jo suhteellisesti
merkittäviä. Riippuvuus näkyy kuvissa
\ref{fig:basic-call-all-types-j-j-fit} ja
\ref{fig:basic-call-all-types-c-c-fit}, joihin on koostettu kaikki
mittausten parametrityypit samankielisissä kutsusuunnissa.
Lineaarisen riippuvuuden perusteella Java-kääntäjä tai Dalvikin
JIT-kääntäjä ei ole onnistunut optimoimaan pois tyhjän metodin kutsua
Java-koodista.

{{{plot(basic-call-all-types-j-j-fit)}}}

{{{plot(basic-call-all-types-c-c-fit)}}}

Kuviin \ref{fig:basic-call-all-types-c-j} ja \ref{fig:basic-call-all-types-j-c} on koostettu eri
parametrityypit suunnissa ({{{permu(C,Java)}}}) ja ({{{permu(\mbox{Java},C)}}}).
Primitiivi- ja viitetyyppien ryhmittyminen näkyy kuvissa selvästi.

Samankielisissä permutaatioissa (kuvat \ref{fig:basic-call-all-types-j-j-fit} ja
\ref{fig:basic-call-all-types-c-c-fit}) ei vastaavaa eroa näy, mutta mielenkiintoisena
yksityiskohtana niissä voidaan havaita 64-bittisten parametrityyppien
~long~ ja ~double~ suurempi rasite 32-bittisessä prosessorissa.

{{{plot(basic-call-all-types-c-j)}}}

{{{plot(basic-call-all-types-j-c)}}}

Vasteajat riippuvat siis lineaarisesti parametrien määrästä, mutta
eivät esimerkiksi parametrina välitettävän taulukon koosta (kuva
\ref{fig:variable-argument-size-j-c}), mikä
olisikin odottamatonta koska taulukot välitetään
viiteparametrina.

{{{plot(variable-argument-size-j-c)}}}

* Kutsuprofiilit suunnassa C\to{}Java

Kutsuprofiilien avulla saadaan lisävalaistusta viiteparametrien
aiheuttamaan suurempaan rasitteeseen sekä kieltenvälisten
kutsusuuntien keskinäisiin eroihin. Listauksen
\ref{profile:C2JBenchmark00206} kutsuprofiilissa nähdään, missä aliohjelmissa
suoritusaikaa kuluu eniten mittauksessa, jossa natiivikomponentista
kutsutaan Java-metodia kahdellakymmenellä Object-tyyppisellä
parametrilla. Suurin osa profiileissa esiintyvistä aliohjelmista
kuuluu Dalvikin C++-toteutukseen.

{{{profile(C2JBenchmark00206)}}}

Tutkielman kutsuprofiilit on laskettu luvussa
\ref{sec-profiling-inclusive} sivulla
\pageref{sec-profiling-inclusive} esitellyn inklusiivisen suoritusajan
avulla, eli aliohjelman suoritusaikaa kuvaavissa prosenttiluvuissa on
mukana aliohjelmassa itsessään sekä kaikissa sen välittömästi tai
välillisesti kutsumissa aliohjelmissa vietetty aika.

Luettaessa profiilia ylhäältä alaspäin päästään kutsuvasta
aliohjelmasta kutsuttuun aliohjelmaan. Profiilissa näkyvä aliohjelma
/A/ on suorituksen aikana kutsunut suoraan kaikkia aliohjelmia, joiden
prosenttiluku ja nimi on piirretty välittömästi aliohjelman /A/
nimestä lähtevän pystyviivan oikealle puolelle. Esimerkiksi
\path{dvmDecodeIndirectRef} \ding{202} on kutsunut suoraan
C++-luokan \path{ScopedPthreadMutexLock} konstruktoria \ding{203} ja destruktoria \ding{204}
sekä luokan \path{IndirectRefTable} metodia \path{get} \ding{204}. Jos
profiilissa esiintyy saman prosenttiluvun alla useampi aliohjelma,
nämä esiintyvät kutsupinossa aina yhdessä -- esimerkiksi ketju
nopeasti suoritettavia pieniä aliohjelmia, joita kutsuprofiilinäytteen
ajallinen erottelukyky tai käytettyjen prosenttilukujen kahden
desimaalin tarkkuus ei riitä erottamaan toisistaan.

# TODO tarkista vika lause

Listauksen \ref{profile:C2JBenchmark00206} kutsuprofiilista ja muista
tutkielman listauksista on jätetty pois perf-mittauksista ja Androidin
taustaprosesseista aiheutuva rasite. Listauksessa
\ref{profile:C2JBenchmark00206} tämä rasite on 28.36%, minkä takia
profiilin kokonaisuoritusaika on 71.64% eikä 100%. Listaus on
aloitettu \path{runInternal}-natiivimetodin kohdalta, jonka
suoritusaika on 71.09%.

Kutsuketju alkaa Dalvikin \path{dvmPlatformInvoke}-aliohjelmasta. Se
on konekielellä toteutettu silta, joka muuntaa Javasta välitetyt
kutsuparametrit paikallisen natiivikutsukonvention mukaiseksi. Koska
tässä mittauksessa lähtösilmukka on natiivikoodissa, lähtee suoritus
käyntiin yhdestä \path{dvmPlatformInvoke}-kutsusta.

Mitattavassa metodissa on keinotekoisen paljon viiteparametreja, joten
profiilista erottuu viitteiden välittämisen aikarasite. Avainkohta on
Dalvikin metodi \path{dvmDecodeIndirectRef}, joka vie 46.21% koko
suoritusajasta ja 64% benchmarkin suoritusajasta. /Indirect
ref[erence]/ tarkoittaa epäsuoraa viitettä, joka välitetään
parametrinä JNI-rajapinnan yli, eli JNI-kutsujen \path{jobject *}
-tyyppisiä parametreja eri muodoissaan. Dalvik-virtuaalikone joutuu
pitämään kirjaa välitetyistä viitteistä tarkoitusta varten
toteutetulla taulutietorakenteella
(\path{dalvik/vm/IndirectRefTable}). Epäsuoria viitteitä tarvitaan,
jotta virtuaalikoneen muistinhallinnalla säilyy tieto myös JNI:n yli
välitetyistä viitteistä. Toisaalta natiivikomponentti ei voi käsitellä
JNI-operaatioilla viitetyyppisiä olioita suorilla muistiosoitteilla
senkään vuoksi, että virtuaalikoneella säilyisi mahdollisuus
järjestellä hallitsemiaan muistialueita uudelleen.

Profiilissa yli puolet epäsuorien viitteiden hallinnan suoritusajasta
kuluu rinnakkaisten säikeiden poissulkemiseen
\path{ScopedPthreadMutexLock}- olion avulla. Tämä johtuu siitä, että
mittauksessa välitetyt olioviitteet ovat /globaaleja/ viitteitä, joita
säilytetään Dalvikin kaikille säikeille yhteisessä, globaalissa
viitetaulukossa. Mittauksessa käytetään globaaleja viitteitä lähinnä
ohjelmakoodin yksinkertaistamiseksi, minkä seurauksena löytyikin
sattumalta tämä hitain suorituspolku \path{dvmDecodeIndirectRef}
-metodin sisältä. Listauksessa \ref{src:dvmDecodeIndirectRef} näkyy
mutex-lukon varaaminen kohdassa \ding{202}. Nopeampi suorituspolku
käyttää lokaalin JNI-kontekstin omaa viitetaulukkoa ilman lukitusta
\ding{203}

\newpage
#+NAME: src:dvmDecodeIndirectRef
#+CAPTION: Ote funktiosta dvmDecodeIndirectRef
#+ATTR_LATEX: frame=lines
#+BEGIN_SRC c++
switch (indirectRefKind(jobj)) {
case kIndirectKindLocal:
    {
        Object* result = self->jniLocalRefTable.get(jobj); (*@\ding{203}@*)
        if (UNLIKELY(result == NULL)) {
            ALOGE("JNI ERROR (app bug): use of deleted local reference (%p)", jobj);
            dvmAbort();
        }
        return result;
    }
case kIndirectKindGlobal:
    {
        // TODO: find a way to avoid the mutex activity here
        IndirectRefTable* pRefTable = &gDvm.jniGlobalRefTable;
        ScopedPthreadMutexLock lock(&gDvm.jniGlobalRefLock); (*@\ding{202}@*)
        Object* result = pRefTable->get(jobj);
        if (UNLIKELY(result == NULL)) {
            ALOGE("JNI ERROR (app bug): use of deleted global reference (%p)", jobj);
            dvmAbort();
        }
        return result;
    }
#+END_SRC

Kattavammissa mittauksissa täytyisi laatia erilliset benchmarkit,
jotka käyttävät paikallisia viitteitä. Tämänkin mittauksen avulla
saadaan kuitenkin jotain käsitystä nopeutuksen suuruusluokasta, joka
paikallisilla viitteillä saavutettaisiin: tämän benchmarkin
kokonaissuoritusajasta yli kolmasosa kuluu lukitukseen.

{{{profile(C2JBenchmark00146)}}}

Listauksen \ref{profile:C2JBenchmark00146} kutsuprofiilissa kutsusuunta on
{{{cj}}} ja kutsussa on kaksikymmentä
~int~-parametria. Profiilissa näkyy edelleen
\path{dvmDecodeIndirectRef} (\ding{202}) 13.42% suoritusajalla ---
benchmarkissa kutsutaan Java-olion kohdemetodia, joten olio täytyy
välittää viitteenä JNI-kutsussa.

#+BEGIN_SRC c
(*env)->CallVoidMethod(env, java_counterparts_object, mid);
#+END_SRC

Kutsussa välitetään siis viite \path{java_counterparts_object}
-olioon, jonka metodia ollaan kutsumassa. Viitteidenkäsittely ei
kuitenkaan enää dominoi kutsuprofiilia, vaan merkittäviä ovat myös
muut C \to Java -kutsun perusrasitteet, jotka ovat nähtävissä
profiilin haaran \path{CallVoidMethod} alakohdissa.

\path{dvmCallMethodV} (15.56%) vastaa Dalvikissa metodin kutsumisesta
vaihtelevalla argumenttimäärällä kaikissa kutsusuunnissa. Ainoa
JNI:hin liittyvä rasite siitä alkavassa kutsuhaarassa on
\path{callPrep}-metodi, jota ei näy vastaavassa vertailukohdassa
suunnassa Java\to{}Java. Suurimpana yleisrasitteena kyseisessä
haarassa näkyvät JIT-kääntäjän suorituksen jäljittämiseen (tracing)
liittyvät toimet, jotka näkyvät myös suunnassa Java\to{}Java.

Varsinaiset JNI-rajapinnan käyttöön liittyvät rasitteet näkyvät
kutsussa \path{dvmGet}-\path{VirtualizedMethod} (3.35%), joka vastaa
dynaamisesti sidotun metodin löytämisestä, sekä
\path{ScopedJniThreadState}-olion luomisessa ja poistamisessa
(yhteensä 5.52%). Olion kautta muutetaan virtuaalikoneen sisäinen tila
\path{dvmChangeStatus}-metodilla. Tämä tilanmuutos tapahtuu kaikissa
JNI-kutsuissa, ja sen avulla virtuaalikone pitää kirjaa, milloin
muistinhallinnan roskienkeruu on sallittua.

Säikeen suorituksen ollessa natiivikomponentissa tila on
~THREAD_NATIVE~, jonka aikana roskienkeruu on mahdollista, mutta
Dalvikin viitetaulukkoa lukemalla roskienkeruu pysyy tietoisena
JNI-rajapinnan yli välitetyistä olioviitteistä. Suorituksen ollessa
käynnissä Java-komponentissa tila on ~THREAD_RUNNING~, jolloin
roskienkeruu edellyttää tilamuutosta esimerkiksi
~THREAD_SUSPENDED~-tilaan (johon tilaan virtuaalikone asettaa itsensä
ennen roskien keruuta).

* Staattiset metodikutsut suunnassa C\to{}Java

Viitteidenkäsittelyn lisärasitteesta Dalvikissa voi päästä eroon
käyttämällä pelkästään primitiiviparametreja ja kutsumalla Java-luokan
/staattista metodia/. 

{{{profile(C2JBenchmark00001)}}}

Profiilissa \ref{profile:C2JBenchmark00001} kutsuttu metodi on
staattinen, eikä \path{dvmDecodeIndirectRef}-kutsua näy. Kun
staattista metodia kutsutaan, välitetään JNI-rajapinnan yli
\path{jclass}-viite, mutta Dalvikissa ei tällaisesta luokkaviitteestä
siis pidetä kirjaa viitetaulukon avulla. Rasite on 500 000
kierroksella 1.49 sekuntia, kun vastaavalla dynaamisella kutsulla se
on 2.68 sekuntia, mistä suurin osa selittyy juuri kutsujen
\path{dvmDecodeIndirectRef} sekä \path{dvmGetVirtualizedMethod}
poistumisella. Mittauksissa ei ole suoritettu kattavasti staattisia
metodikutsuja vaihtelevilla parametrimäärillä, vaan ainoastaan
parametrin määrällä 0, jotta eri kutsutyyppien variaatioiden määrä
pysyisi hallinnassa.

* Kutsuprofiilit suunnassa Java\to{}C

Mikä sitten selittää, että {{{cj}}} -kutsusuunnan vasteaika on
1.56 kertaa {{{jc}}}-kutsusuunnan vasteaika parhaimmassakin
tapauksessa eli kutsuttaessa staattista metodia ilman parametreja?
Luvussa täytyy huomioida, että mitatut kokonaisvasteajat sisältävät
muutakin kuin tarkastelun kohteena olevassa JNI-toteutuksessa vietetyn
ajan --- nimittäin kutsun kohteena olevan aliohjelman suorittamiseen
kuluvan ajan.

Java-komponentissa olevan kohdemetodin suoritus konekielitasolla on
hyvin erilaista natiivikomponentin kohdefunktion suoritukseen
nähden. Edellistä suoritetaan Dalvikin tavukooditulkin kautta, joka
huolehtii myös JIT-kääntämiseen liittyvästä jäljittämisestä ja
suorittaa mahdollisesti JIT-käännettyä koodia. Lisäksi
Java-kohdemetodiin on näissä mittauksissa lisätty yksinkertainen
sivuvaikutuksellinen operaatio, jotta sitä ei optimoitaisi tyhjänä
pois käännösvaiheessa.

JNI-lisärasitteen suuruudesta saakin paremman arvion seuraavasti.
Kutsusuunnan {{{cj}}} rasite saadaan vähentämällä ({{{cj}}})-vasteajasta
({{{jj}}})-vasteaika. Sama pätee kääntäen myös toiseen
kutsusuuntaan. Olettaen, että itse lähtösilmukan yleisrasite on
merkityksettömän pieni suhteessa koko vasteaikaan, saadaan näin
selville, miten paljon kauemmin kestää kutsua samaa kohdealiohjelmaa
JNI:n yli verrattuna normaaliin kutsuun ilman JNI:tä. Tällä tavalla
saadaan tarkennettua {{{cj}}} kutsusuunnan JNI-rasite tässä
parhaimmassa tapauksessa noin 1.19 kertaiseksi {{{jc}}}-suunnan
rasitteeseen nähden.

Listauksien \ref{profile:C2JBenchmark00001} ja
\ref{profile:J2CBenchmark00001} profiileja vertailemalla saadaan tähän
lisärasitteeseen ainakin osittainen selitys. {{{jc}}} -kutsussa ei
luoda \path{ScopedJniThreadState}-oliota, vaan virtuaalikoneen
suoritustilan muuttavaa \path{dvmChangeStatus}-metodia kutsutaan
suoraan. Samoin \path{callPrep}-funktio puuttuu. Näiden
toteutusyksityiskohtien tarkempi analyysi jätetään tässä tekemättä.

{{{profile(J2CBenchmark00001)}}}

Kuvasta \ref{fig:basic-call-Object-fit} nähdään myös, että
viiteparametrien määrän lisääntyessä {{{jc}}}-suunnan kuvaajan
kulmakerroin on loivempi. Tästä voisi päätellä, että viitteiden
hallinta tähän suuntaan on tehokkaampaa. Listauksen
\ref{profile:J2CBenchmark00206} perusteella ero saattaa suurelta osin
selittyä sillä, että {{{jc}}}-suunnassa käsitellyt viitteet ovat
lokaaleja ja päinvastaisen suunnan viitteet globaaleja. Kyseisessä
suunnassa viitteet ovat oletusarvoisesti lokaaleja JNI-standardin
mukaisesti -- natiivikomponentin on erikseen luotava globaalit
viitteet, jos aikoo käyttää viitteitä yksittäisen natiivimetodikutsun
elinkaaren ulkopuolella. Suunnassa {{{jc}}} ei myöskään tarvita
rinnakkaisten säikeiden poissulkemista listauksen
\ref{profile:J2CBenchmark00206} kohdassa \ding{202}.

{{{profile(J2CBenchmark00206)}}}
\newpage

** jni-totetutus: dalvik: source code kommentteja                                         :noexport:

*** Jni.cpp moduulin kommentti: Native methods and interaction with the GC
    All JNI methods must start by changing their thread status to
    THREAD_RUNNING, and finish by changing it back to THREAD_NATIVE before
    returning to native code.  The switch to "running" triggers a thread
    suspension check.
    
    With a rudimentary GC we should be able to skip the status change for
    simple functions, e.g.  IsSameObject, GetJavaVM, GetStringLength, maybe
    even access to fields with primitive types.  Our options are more limited
    with a compacting GC.
    
    For performance reasons we do as little error-checking as possible here.
    For example, we don't check to make sure the correct type of Object is
    passed in when setting a field, and we don't prevent you from storing
    new values in a "final" field.  Such things are best handled in the
    "check" version.  For actions that are common, dangerous, and must be
    checked at runtime, such as array bounds checks, we do the tests here.
    
    
    General notes on local/global reference tracking
    
    JNI provides explicit control over natively-held references that the GC
    needs to know about.  These can be local, in which case they're released
    when the native method returns into the VM, or global, which are held
    until explicitly released.  (There are also weak-global references,
    which have the lifespan and visibility of global references, but the
    object they refer to may be collected.)
    
    The references can be created with explicit JNI NewLocalRef / NewGlobalRef
    calls.  The former is very unusual, the latter is reasonably common
    (e.g. for caching references to class objects).
    
    Local references are most often created as a side-effect of JNI functions.
    For example, the AllocObject/NewObject functions must create local
    references to the objects returned, because nothing else in the GC root
    set has a reference to the new objects.
    
    The most common mode of operation is for a method to create zero or
    more local references and return.  Explicit "local delete" operations
    are expected to be exceedingly rare, except when walking through an
    object array, and the Push/PopLocalFrame calls are expected to be used
    infrequently.  For efficient operation, we want to add new local refs
    with a simple store/increment operation; to avoid infinite growth in
    pathological situations, we need to reclaim the space used by deleted
    entries.
    
    If we just want to maintain a list for the GC root set, we can use an
    expanding append-only array that compacts when objects are deleted.
    In typical situations, e.g. running through an array of objects, we will
    be deleting one of the most recently added entries, so we can minimize
    the number of elements moved (or avoid having to move any).
    
    If we want to conceal the pointer values from native code, which is
    necessary to allow the GC to move JNI-referenced objects around, then we
    have to use a more complicated indirection mechanism.
    
    The spec says, "Local references are only valid in the thread in which
    they are created.  The native code must not pass local references from
    one thread to another."
    
    
    Pinned objects
    
    For some large chunks of data, notably primitive arrays and String data,
    JNI allows the VM to choose whether it wants to pin the array object or
    make a copy.  We currently pin the memory for better execution performance.
    
    TODO: we're using simple root set references to pin primitive array data,
    because they have the property we need (i.e. the pointer we return is
    guaranteed valid until we explicitly release it).  However, if we have a
    compacting GC and don't want to pin all memory held by all global refs,
    we need to treat these differently.
    
    
    Global reference tracking
    
    There should be a small "active" set centered around the most-recently
    added items.
    
    Because it's global, access to it has to be synchronized.  Additions and
    removals require grabbing a mutex.  If the table serves as an indirection
    mechanism (i.e. it's not just a list for the benefit of the garbage
    collector), reference lookups may also require grabbing a mutex.
    
    The JNI spec does not define any sort of limit, so the list must be able
    to expand to a reasonable size.  It may be useful to log significant
    increases in usage to help identify resource leaks.
    
    
    Weak-global reference tracking
    
    [TBD]
    
    
    Local reference tracking
    
    Each Thread/JNIEnv points to an IndirectRefTable.
    
    We implement Push/PopLocalFrame with actual stack frames.  Before a JNI
    frame gets popped, we set "nextEntry" to the "top" pointer of the current
    frame, effectively releasing the references.
    
    The GC will scan all references in the table.

*** stack.cpp dvmCallMethodV (staattiset metodit)
    We don't need to take the class as an argument because, in Dalvik,
    we don't need to worry about static synchronized methods.

*** indirectreftable                                                                      :noexport:

Maintain a table of indirect references.  Used for local/global JNI
references.

The table contains object references that are part of the GC root set.
When an object is added we return an IndirectRef that is not a valid
pointer but can be used to find the original value in O(1) time.
Conversions to and from indirect refs are performed on JNI method calls
in and out of the VM, so they need to be very fast.

To be efficient for JNI local variable storage, we need to provide
operations that allow us to operate on segments of the table, where
segments are pushed and popped as if on a stack.  For example, deletion
of an entry should only succeed if it appears in the current segment,
and we want to be able to strip off the current segment quickly when
a method returns.  Additions to the table must be made in the current
segment even if space is available in an earlier area.

A new segment is created when we call into native code from interpreted
code, or when we handle the JNI PushLocalFrame function.

The GC must be able to scan the entire table quickly.

In summary, these must be very fast:
- adding or removing a segment
- adding references to a new segment
- converting an indirect reference back to an Object
These can be a little slower, but must still be pretty quick:
- adding references to a "mature" segment
- removing individual references
- scanning the entire table straight through

If there's more than one segment, we don't guarantee that the table
will fill completely before we fail due to lack of space.  We do ensure
that the current segment will pack tightly, which should satisfy JNI
requirements (e.g. EnsureLocalCapacity).

To make everything fit nicely in 32-bit integers, the maximum size of
the table is capped at 64K.

None of the table functions are synchronized.

----

Indirect reference definition.  This must be interchangeable with JNI's
jobject, and it's convenient to let null be null, so we use void*.

We need a 16-bit table index and a 2-bit reference type (global, local,
weak global).  Real object pointers will have zeroes in the low 2 or 3
bits (4- or 8-byte alignment), so it's useful to put the ref type
in the low bits and reserve zero as an invalid value.

The remaining 14 bits can be used to detect stale indirect references.
For example, if objects don't move, we can use a hash of the original
Object* to make sure the entry hasn't been re-used.  (If the Object*
we find there doesn't match because of heap movement, we could do a
secondary check on the preserved hash value; this implies that creating
a global/local ref queries the hash value and forces it to be saved.)

A more rigorous approach would be to put a serial number in the extra
bits, and keep a copy of the serial number in a parallel table.  This is
easier when objects can move, but requires 2x the memory and additional
memory accesses on add/get.  It will catch additional problems, e.g.:
create iref1 for obj, delete iref1, create iref2 for same obj, lookup
iref1.  A pattern based on object bits will miss this.

For now, we use a serial number.

# TODO viite 




* Merkkijonojen käsittely

Java-merkkijonojen sisältöä käsitellään natiivikomponentista
seuraavilla operaatioilla. Osoittimen palauttavia ja vapauttavia
operaatioita kutsutaan aina pareittain, joten jokainen pari on koottu
yhteisen benchmarkin alle. On tärkeä huomata, että Java-merkkijonojen
muokkaaminen on ohjelmoijalta kielletty, vaikka se olisikin
mahdollista JNI:n osoitinoperaatioiden avulla: Javan merkkijonot ovat
muuttumattomia.

Mittauksissa benchmarkeille on annettu nimet seuraavasti:

- ReadString ::  ~GetStringChars~ ja ~ReleaseStringChars~
- ReadStringCritical :: ~GetStringCritical~ ja ~ReleaseStringCritical~
- ReadStringUTF :: ~GetStringUTFChars~ ja ~ReleaseStringUTFChars~.

Kopioivat operaatiot ~GetStringRegion~ ja ~GetStringUTFRegion~ näkyvät
tuloksissa nimillään samoin kuin tukioperaatiot ~GetStringLength~ ja
~GetStringUTFLength~. Viimeksi mainituilla selvitetään merkkijonon
pituus, mikä on tarpeen ennen kuin merkkijonon voi läpikäydä
C-koodissa.

Näille {{{cj}}} -suunnan operaatioille ei ole löydettävissä vastinpareja
suunnissa {{{cc}}} tai {{{jj}}}, sillä kyseessä ovat operaatiot, joita
on kutsuttava sen /lisäksi/ että merkkijonoa varsinaisesti luetaan
natiivikoodissa. Siten natiivimerkkijonojen käsittely C-kielessä ei
vaadi mitään vastaavaa ylimääräistä operaatiota kuten ei myöskään
Java-merkkijonojen käsittely Java-koodissa, vaan kyseessä on puhtaasti
JNI-rajapinnasta johtuva lisärasite.

Kutsusuunnassa {{{jc}}} operaatioille on kuitenkin eräs vertailukohta.
Natiivimerkkijonojen eli ~char~-taulukoiden käsittely
~java.nio.CharBuffer~-olioina Java-koodissa on mahdollista
~Non-blocking IO~-API:n kautta, joita käsitellään myöhemmin tässä
luvussa.

# TODO: copyUTF O^2? -- mikä on arvo parametrilla 0?
Vasteaikamittauksista huomataan ensinnäkin, että osoitinoperaatiot,
jotka välittävät viittauksen suoraan virtuaalikoneen sisäiseen
Unicode-tietorakenteeseen, ovat yhtä nopeita riippumatta merkkijonon
pituudesta (ks. kuva \ref{fig:special-calls-unicode-c-j-fit}). Tämä on
odotetusten mukaista, sillä operaatiossa välitetään vain osoite
merkkijonoon. Myös Unicode-merkkijonon pituuden selvitys on
vakiollinen operaatio, oletettavasti koska merkkijonon pituus on
tallessa Java-merkkijonon sisäisessä toteutuksessa. Kopioivan
operaation \path{GetStringRegion} riippuvuus on odotetusti
lineaarinen.

# {{{plot(54)}}}
{{{plot(special-calls-unicode-c-j-fit)}}}

# TODO Lisää prosentit alle

{{{profile(C2JReadUnicode-512)}}}

Kuitenkin noin alle 1500 merkin pituisilla merkkijonoilla merkkijonon
kopioiminen \path{GetStringRegion}-metodilla on nopeampaa kuin
osoitteen saaminen merkkijonon muistialueelle. Osoitinoperaation
kutsuprofiili näkyy listauksessa \ref{profile:C2JReadUnicode-512},
jossa merkittävimpänä vasteajan komponenttina on jälleen globaalin
~jstring~-viitteen purku. Seuraavaksi merkittävin kustannus (8.44%)
syntyy toisesta muistinhallintaan liittyvästä toimesta, eli
merkkijonon sisäisen merkkitaulukon /kiinnikytkemisestä/
(\path{pinPrimitiveArray}), mikä takaa että palautettu muistiosoite
pysyy voimassa. Itse merkkijonon merkkien nouto
(\path{StringObject::chars()} ja \path{StringObject::array()}) vievät
kokonaisajasta vain 0.7%. Muistinhallintaan liittyvät rasitteet
tavallaan myös tuplaantuvat, koska vastaavat toimet tehdään sekä
noudettaessa että vapautettaessa viite merkkijonon sisältöön, mikä
näkyy myös kutsuprofiilissa.

{{{profile(C2JCopyUnicode-512)}}}

Kopioivan Unicode-operaation profiilissa
\ref{profile:C2JCopyUnicode-512} näkyy myös globaalin
~jstring~-viitteen purku, mutta se tapahtuu vain kerran eikä kahdesti.

Sen sijaan UTF-muunnoksen tekevä osoitinoperaatio on riippuvainen
kohteen koosta. Se on myös operaatio, joka johtaa Dalvikin allokoimaan
muistia muunnettua merkkijonoa varten. Siksi kuvan \ref{fig:special-calls-utf-c-j-alloc-fit}
vasteajat on mitattu allokoiviin operaatioihin soveltuvilla
vähäisemmillä lähtösilmukan kierrosmäärillä: allokoivien operaatioiden
kierrosluku on 300 ja ei-allokoivien 500000, joten vasteaikojen
suhdeluku on 3:5000.

{{{plot_a(special-calls-utf-c-j-alloc-fit)}}}
# TODO kuva puuttuu yltä

Samoin kopioivat operaatiot ovat lineaarisesti raskaampia kopioitavan
kohteen koon kasvaessa, mutta tässäkin tapauksessa merkistökoodauksen
muunnos Javan 16-bittisestä Unicodesta 8-bittiseen UTF-8:aan on
merkittävästi raskaampi kuin pelkkä Unicode-merkkien kopiointi. Näin
ollen kuvassa \ref{fig:special-calls-utf-c-j-fit} merkkijonon koon
selvittäminen UTF-8-koodauksessa on raskaampi operaatio kuin
Unicode-merkkijonon kopioiminen.

# {{{plot(56)}}}
{{{plot(special-calls-utf-c-j-fit)}}}

* Taulukoiden käsittely

Taulukoiden käsittelyn perusmenetelmät ovat samat kuin merkkijonojen
käsittelyssä, mutta merkistökoodaukseen liittyviä rasitteita ei
tällöin ole, ja viitetyyppejä sisältävät taulukot käsitellään omana
erityistapauksenaan. Lisäksi Java-taulukoiden lukeminen ja kirjoittaminen
ovat molemmat sallittuja. Osoittimen palauttavia operaatiota mitataan
seuraavissa benchmarkeissa.

- Get\tau{}ArrayElements :: Funktiot \verb|Get|\tau\verb|ArrayElements| ja
     \verb|Release|\tau\verb|ArrayElements|
- ReadPrimitiveArrayCritical :: Funktiot \path{GetPrimitiveArrayCritical} ja
     \path{Release}-\path{PrimitiveArrayCritical}

Operaatioiden nimet saadaan korvaamalla \tau jollakin Javan
primitiivityypeistä. Kopioivat operaatiot ovat ~Get~\(\tau\)\verb|ArrayRegion| ja
\verb|Set|\(\tau\)\verb|ArrayRegion|.

Viitetyyppisten taulukoiden elementtejä voi käsitellä vain yksi
kerrallaan operaatioilla ~GetObjectArrayElement~ ja
~SetObjectArrayElement~. Molempien kutsurasitteeksi saatiin 46.6ms
kutsua kohti eli karkeasti arvioiden yli 20 sekuntia 512-alkioisen
taulukon läpikäyntiin.

Suoria vertailukohtia näille suunnan C\to{}Java taulukko-operaatioille
ei ole muissa kutsusuunnissa, jälleen kerran lukuunottamatta
~NIO~-rajapintaa (ks. kohta \ref{sec:measurement-classification-nio}).

Primitiivitaululukoiden operaatioiden osoitinversioiden vasteajat ovat
odotetusti vakiollisia suhteessa syötteen kokoon (kuvan
\ref{fig:special-calls-arrayelements-c-j-fit} ylempi ryhmittymä), kun
taas kopioivat versiot kasvavat lineaarisesti syötteen koon kasvaessa
(kuva \ref{fig:special-calls-arrayregion-c-j-fit}). Merkkijonon
pituuden selvittäminen on vakiollinen operaatio (kuvan
\ref{fig:special-calls-arrayelements-c-j-fit} alempi ryhmittymä).

{{{plot(special-calls-arrayelements-c-j-fit)}}}

{{{plot(special-calls-arrayregion-c-j-fit)}}}

Kutsuprofiilien perusteella taulukoiden osoitinoperaatioiden
kutsurakenteet ovat täsmälleen samoja merkkijonojen
osoitinoperaatioiden kanssa, joten kutsuprofiileja ei ole erikseen
listattu. Funktioiden \verb|GetCharArrayElements| ja
\path{GetStringChars} vasteajatkin ovat mittauksissa yhtä
suuret. Keskeisimmät rasitteet syntyvät siis epäsuoran globaalin
viitteen purusta ja taulukon kiinnikytkemisestä.

Kopioivien operaatioiden vasteajat noudattelevat kopioitavan
primitiivityypin kokoa. Vasteajoissa on vakioelementti, joka syntyy
taulukkoviitteen purusta --- kiinnikytkemistä ei kopioitaessa
tarvita. Lineaarisen riippuvuuden kulmakerroin määräytyy melko suoraan
varsinaisesta muistialueen kopioinnista (\path{memcpy}), määräävänä
tekijänä kopioitavien elementtien koko tavuina. Siten
~double~-taulukon kopiointi (kun vakiorasite on vähennetty) on noin
kaksi kertaa niin raskasta kuin ~float~-taulukon.  Vertailun vuoksi
kopioivan merkkijono-operaation \path{GetStringRegion} rasite vastaa
hyvin 16-bittisen char-taulukon kopioimisen
rasitetta. Kutsuprofiileissa lineaarinen riippuvuus näkyy niin, että
~memcpy~-operaation prosenttiosuus operaatiossa kasvaa tasaisesti
syötteen koon kasvaessa.

# TODO; kerro että memcpy ei jostain syystä istu siististi
# profiiliin

# TODO: käsittele erikseen critical-versiot

# TODO readcompletearray-etc-vastinparit tähän vai vasta
# loppuun? ehkä loppuun?

* Non-blocking I/O
\label{sec:measurement-classification-nio}

#  Tällöin JNI:n merkkijononkäsittelyoperaatioiden aiheuttamaa
# rasitetta vastaa (1) natiivikomponentin JNI-kutsu
# \path{NewDirectByteBuffer}, joka luo etukäteen varatun muistialueen
# ympärille \path{ByteBuffer}-olion ja (2) JNI-kutsu, jossa
# Java-komponentille lähetetään viite kyseiseen olioon.

# TODO sijoita ylläoleva jonnekin?

Javan standardikirjaston paketin ~java.nio~ luokka ~ByteBuffer~ antaa
joitakin lisämahdollisuuksia datan siirtoon Java- ja
natiivikomponenttien välillä. ~ByteBuffer~-olio edustaa jatkuvaa
muistialuetta, jota voi käsitellä tehokkaasti molemmissa
ympäristöissä.

Jos ~ByteBuffer~-on allokoitu /suorana/ (/direct/), virtuaalikone
yrittää taata, että natiivioperaatiot (käyttöjärjestelmän operaatiot
tai JNI-natiivikomponentin suorittamat operaatiot), joita puskurille
suoritetaan, tehdään suoraan samalle muistialueelle, jota
Java-ohjelmakin käsittelee. Sitävastoin epäsuoran puskurin sisältö
saatetaan kopioida erikseen ennen
natiivi-I/O-operaatioita. JNI-rajapinta tarjoaa pääsyn ainoastaan
/suoran/ ~ByteBuffer~-olion muistialueelle, jota voi käsitellä suoraan
osoittimen avulla.

# TODO tähän tarvitaan ehkä viitteitä

# Keskeinen tutkielman päämäärä on hahmottaa, mikä on tehokkain tapa
# /välittää dataa/ JNI-rajapinnan yli. Tämän takia
# ~java.nio.ByteBuffer~-olion käsittelyä Java- ja natiivikomponenteissa
# verrataan muihin datanvälitystapoihin: kutsuargumenttien ja
# paluuarvojen välitykseen sekä merkkijonojen ja taulukoiden
# käsittelyyn. Mittauksen avulla yritetään tutkia esimerkiksi, onko
# kokonaisrasitteen kannalta tehokkaampaa välittää rajapinnan yli viite
# taulukkoon vai ~ByteBuffer~-olioon. Tässä täytyy huomioida niin
# viitteen välityksen, tarvittavien tukipalveluiden kuin itse
# muistialueen käsittelyn aiheuttamat rasitteet.

NIO-luokkien käytön kustannuksiin täytyy laskea seuraavien
~ByteBuffer~-olion käsittelyssä välttämättömien JNI-palveluiden
lisärasitteet. Ensimmäisessä vaihtoehdossa funktiolla
\path{NewDirectByteBuffer} luodaan natiivikomponentista käsin suora
tavupuskuri eli Javan ~DirectByteBuffer~-olio /valmiiksi allokoituun
muistialueeseen/.

Jos taas puskurin muisti on varattu Java-komponentissa,
natiivikomponentti saa puskurin edustaman muistialueen osoitteen
\path{GetDirectBufferAddress}-kutsulla ja kapasiteetin
\path{GetDirectBufferCapacity}-kutsulla. Koska tässä vaihtoehdossa
molemmat operaatiot ovat edellytyksiä puskurin käytölle, ne mitattiin
yhdessä benchmarkissa, jonka vasteajaksi saatiin 2.31
sekuntia. Benchmarkin kutsuprofiilissa näkyvät ainoastaan epäsuoran
globaalin viitteen purku sekä virtuaalikoneen suoritustilan muutos,
jotka nähtiin aiemminkin käsitellyissä JNI-kutsuissa.

| JNI-kutsu                       | kierrosmäärä |   vasteaika | vertailuluku |
|---------------------------------+--------------+-------------+--------------|
| \path{GetDirectBufferAddress} + | 500 000      |        2.31 |         2.31 |
| \path{GetDirectBufferCapacity}  |              |             |              |
|---------------------------------+--------------+-------------+--------------|
| \path{NewDirectByteBuffer}      | 300          | 0.007909092 |         13.2 |

\path{NewDirectByteBuffer}-kutsuprofiili listauksessa
\ref{profile:C2JNewDirectBuffer-512} näyttää lähes yksinomaan
roskienkeruuseen liittyviä metodikutsuja alkaen metodista
\path{dvmCollectGarbage}. Tämä on mittaustekninen ongelma, joka tekee
kaikkien muistia varaavien operaatioiden kutsuprofiilit hankaliksi
hyödyntää. Siinä missä benchmarkin suoritus on saatu mitattua ilman
roskienkeruuta /vasteaikamittauksissa/, kutsuprofiilinäytteet kerätään
yhtäjaksoisesti useiden sekuntien jaksolta, jonka aikana
suhteellisesti suurin osa ajasta vietetään roskienkeruussa. Allokoivia
operaatioita ei voi ajaa kuin lyhyen ajan ennen kuin muistia täytyy
vapauttaa, jotta se ei loppuisi.

{{{profile(C2JNewDirectBuffer-512)}}}

{{{plot_edited(special-calls-non-dynamic, Kenttien käsittely eri kutsusuunnissa)}}}

* Kenttien käsittely

Kuvaan \ref{fig:special-calls-non-dynamic} on koottu Javan olioiden ja
luokkien kenttien käsittelemiseen käytettävien JNI-metodien vasteajat.
Vertailukohtina kuvassa ovat vastaavat operaatiot puhtaasti
Java-komponentissa suoritettuina.

Kuvasta nähdään, että staattisten kenttien luku ja kirjoittaminen
kestää noin puolet ilmentymäkenttien luvusta ja
kirjoittamisesta. Viitetyyppisen ilmentymäkentän lukeminen on vielä
hieman hitaampaa kuin muiden ilmentymäkenttien.

Profiileista tunnistetaan sama kaava kuin aiemmin: siinä missä
staattisten kenttien käsittelyn ainoa merkittävä JNI-lisärasite johtuu
virtuaalikoneen tilamuutoksesta, ilmentymäkenttää käsitellessä
joudutaan lisäksi purkamaan globaali viite ilmentymään, jonka kenttää
käsitellään. \path{GetObjectField}-operaatiossa joudutaan myös
lisäämään kentästä luettu olioviite viitetaulukkoon
\path{addLocalReference}-kutsulla, koska kyseinen viitearvo välitetään
natiivikomponentille, ja sen on siksi löydyttävä virtuaalikoneen
viitetaulukosta.

* Sivuutetut operaatiot

Tutkielmassa jätettiin mittaamatta osa JNI-rajapinnan lukuisista
metodeista, ja osa mittaustuloksistakin jätettiin lopulta tarkemmin
analysoimatta. Keskeinen tutkielman tavoite oli löytää rajapinnan
käytön keskeisimmät pullonkaulat, jotka ilmenevät rajapinnan
realistisessa käytössä. Siksi harvoin tai vain erikoistilanteissa
kutsuttavat rajapinnan palvelut rajattiin tutkielman ulkopuolelle.

Nämä harvemmin tarvittavat palvelut liittyvät muun muassa
eksplisiittiseen viitteiden käsittelyyn, olioiden ja luokkien
ominaisuuksien käsittelyyn, reflektioon sekä natiivimetodien
rekisteröintiin.

Sen sijaan todennäköisesti oleellisemmat, mutta mittausten
yksinkertaistamisen vuoksi pois rajatut palvelut liittyvät
rinnakkaisohjelmointiin (\path{MonitorEnter} ja \path{MonitorExit}) ja
poikkeustenkäsittelyyn. Ne olisivat mielenkiintoinen jatkotutkimuksen
aihe.

Mittauksia tehtiin myös /allokoiville/ rajapinnan palveluille, joilla
luodaan uusia Java-olioita. Näitä operaatioita ei kuitenkaan käsitelty
systemaattisesti, koska muiden tulosten valossa niidenkään
laajamittainen käyttäminen natiivikomponentista tuskin on tehokasta
jos se on vältettävissä -- viitetyyppisten olioiden käytöstä kun
syntyvät keskeisimmät JNI-rajapinnan kustannukset.

