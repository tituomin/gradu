\label{sec-measurement-setup}

Tutkielmaa varten laadittiin synteettinen
benchmarking-mittausohjelmisto (/microbenchmarking suite/)
/NativeBenchmark/. Ohjelmiston avulla Android-laitteessa voidaan
suorittaa kokoelma minimaalisia aliohjelmia, jotka yhdessä
harjoittavat kattavasti JNI-rajapinnan eri kutsuja.

Kun alkeisoperaatioita suoritetaan laitteessa, samojen operaatioiden
suoritusta mitataan kahdella toisiaan täydentävällä menetelmällä eri
mittausajojen aikana: ensin yksittäisen aliohjelman suorituksen
kokonaisvasteaika mitataan Javan \path{System}\path{.nano}- \path{Time()}-metodilla, ja
seuraavassa ajossa samoille aliohjelmille luodaan
näytteenottomenetelmällä kutsuprofiilit Linuxin \path{perf}-työkalun
avulla.

* Mittausten tavoitteet

# [[sec-5][5, s.]]
# [[file:performance.org::*Mittauskohteen%20edustavuus%20ja%20tulosten%20yleistett%C3%A4vyys][Mittauskohteen edustavuus ja tulosten yleistettävyys]]
# todo sisäinen viittaus tohon alle: miten ?

Yksittäisen funktiokutsun mitattu vasteaika ei kerro mitään
yleispätevää kyseisestä funktiosta
(ks. luku \ref{performance:representativeness-generalization},
s.\pageref{performance:representativeness-generalization}). Siksi samaa
funktiota kutsutaan varioiden kaikkia mahdollisia asioita, joita
funktiokutsussa voi varioida: käytännössä kutsuparametrien määrää ja
niiden tyyppiä. Lisäksi jos kyseessä on merkkijonoja, taulukoita tai
muita vaihtelevankokoisia syötteitä käsittelevä funktio, varioidaan
käsiteltävän syötteen kokoa.

Esimerksi JNI-funktio \path{CallVoidMethod} vastaanottaa vaihtelevan määrän
kutsuparametreja. Mittausajoissa sitä kutsutaan eri määrillä eri
tyyppisiä parametreja, jolloin saadaan selville muun muassa, käyttäytyykö
funktio eri tavalla käsitellessään primitiivityyppisiä ja
viitetyyppisiä parametreja.

Tämän ansiosta mittauksista piirtyy hieman kokonaisvaltaisempi kuva
siitä, mitkä mittauksessa varioitavat muuttujat ovat oleellisia
funktion suorituskyvyn kannalta.

Toinen tapa lisätä tulosten hyödynnettävyyttä on seuraava periaate:
jos jollekin JNI-kutsulle on keksitty analoginen kutsu tai operaatio
JNI-rajapinnan ulkopuolelta -- operaatio, jonka voi toteuttaa
puhtaasti C- tai Java-kielisessä ohjelmassa -- lisätään mittauksiin
tällaiset benchmarkit. Siten esimerkiksi JNI-rajapinnan
\path{CallVoidMethod}- perusfunktiokutsun kaikille variaatioille on
laadittu vertailukohdaksi benchmarkit, joissa C-ohjelma
kutsuu aivan tavallista ~void~-paluuarvollista funktiota,
ja Java-ohjelma vastaavasti kutsuu ~void~-paluuarvollista metodia.

Kolmas tapa saada syvempiä tuloksia JNI-rajapinnan käyttäytymisestä on
mitata samoista benchmarkeista myös kutsuprofiilit. Kun
vasteaikamittauksista on löytynyt mielenkiintoisia riippuvuuksia
varioitavien mittausmuuttujien ja vasteaikojen väliltä, nähdään
saman benchmarkin kutsuprofiileista usein selvästi, mikä
JNI-toteutuksen osa aiheuttaa esimerkiksi lineaarisesti lisääntyvän
vasteajan, kun vaikkapa viitearvoisten kutsuparametrien määrää
lisätään.

* Toteutuksen haasteet ja reunaehdot

Erilaisten kutsuvariaatioiden kokonaismäärä on suuri, eikä
variaatioita voi yleensä toteuttaa ajonaikaisina muutoksina ohjelman
syötteissä: esimerkiksi metodiparametrien määrä on Java-ohjelmassa
oltava tiedossa käännösaikana. Variaatioista on vieläpä parhaimmillaan
luotava 4 eri versiota:

# footnote http://docs.oracle.com/javase/1.5.0/docs/guide/language/varargs.html
# javan varargs on vain syntaktista sokeria arraylle

1. puhdas C-kielinen versio,
2. puhdas Java-kielinen versio,
3. Java-ohjelma, joka kutsuu natiivimetodia, sekä
4. C-ohjelma, joka kutsuu Java-metodia.

Variaatioiden hallitsemiseksi on hyödynnetään yksinkertaista
staattista metaohjelmointia: benchmarkeja ei ohjelmoida käsin, vaan
niiden lähdekoodi generoidaan tietorakenteista, joihin on kuvattu
halutut tyyppivariaatiot.

# Esimerkki ?  / bit of source

Koska Java-kieli ei suoraan tue staattisen metaohjelmoinnin
mahdollisuutta, eikä C++-kielen templateja voisi hyödyntää kuin
natiiviversioiden ohjelmointiin, päätettiin lähdekoodin generointi
tehdä täysin erillisellä Python-kielisellä ohjelmalla.

Seuraavassa hahmotellaan tästä perusratkaisusta syntynyttä
arkkitehtuuria.

* Ohjelmiston kokonaisarkkitehtuuri

Ohjelmisto koostuu kolmesta komponentista, joista käännöstyökalut ja
analyysityökalut ajetaan kehitysympäristössä työpöytä-Linux-järjestelmässä ja
mittaustyökalut Android-laitteessa.

#+NAME: fig:architecture
#+INCLUDE: "../../src/figures/architecture.puml" src plantuml :results file :file /tmp/architecture.png :exports results
#+CAPTION: Arkkitehtuurin yleiskuvaus
#+LABEL: fig:architecture
#+RESULTS: fig:architecture

Ohjelmiston pääkomponentit näkyvät kuvassa \ref{fig:architecture}, ja
ne käsitellään seuraavassa tarkemmin.

* Android-sovellus NativeBenchmark

#+NAME: fig:nativebenchmark_architecture
#+INCLUDE: "../../src/figures/architecture-nativebenchmark.puml" src plantuml :results file :file /tmp/architecture-nativebenchmark.png :exports results
#+CAPTION: NativeBenchmark
#+LABEL: fig:nativebenchmark_architecture
#+RESULTS: fig:nativebenchmark_architecture

Android-sovellus \path{NativeBenchmark} sisältää kaiken
Android-laitteessa suoritettavan ohjelmakoodin: Java-kielisten ja
natiivikirjastoon kuuluvien benchmarkien lisäksi sovellukseen kuuluu
ohjelmalogiikka, joka suorittaa halutut benchmarkit valituilla
mittaustyökaluilla.

NativeBenchmark huolehtii mittausajoja koskevien asetustiedostojen
lukemisesta ja tulostaa kaikki mittaustulokset ja niihin liittyvän
metadatan tiedostoihin. Sovelluksessa on yksinkertainen graafinen
Android-käyttöliittymä, mutta sovellusta voi ohjata myös laitteen
ulkopuolelta tekstikomentojen avulla TCP-yhteyden välityksellä.

Sovelluksen keskeisimmät osat ovat
- ~benchmark~ -paketin sisältämät generoidut benchmarkit,
- ~libnativebenchmark~ -natiivikirjasto, joka sisältää generoitujen
  benchmarkien natiiviosat,
- ~BenchmarkRunner~ -luokka,
- ~MeasuringTool~ -luokan kaksi aliluokkaa
  \path{JavaSystemNanoResponseTimeRecorder} sekä \path{LinuxPerfRecordTool}.

Benchmarkit ovat pohjimmiltaan vain monta kertaa toistettavia
silmukoita (/lähtösilmukoita/), joiden sisällä kutsutaan tutkinnan
kohteena olevaa JNI-palvelua tai sen verrokkia. Jokainen benchmark on
ympäröity samanrakenteisella Java-kielisellä \path{BenchMark}-luokan
aliluokalla --- silloinkin, kun kyseessä on sellainen
verrokkioperaatio, joka suoritetaan puhtaasti
\path{libnativebenchmark}-natiivikirjaston sisällä. Tällaisessakin
tapauksessa mittauksen kuitenkin aina käynnistää
\path{BenchmarkRunner} -Java-olio.

Mittauskohteet voi luokitella kahteen joukkoon: funktiokutsuihin
sekä muihin JNI:n tarjoamiin palveluihin. Ensiksi mainittu joukko
koostuu yksinkertaisista funktiokutsuista JNI-rajapinnan kautta:
C-koodissa kutsuista \verb|Call|\tau\verb|Method| -funktioihin ja
Java-koodissa kutsuista ~native~ -määreellä merkittyihin
~nativemethod~ -nimisiin metodeihin. Näille funktiokutsuille on myös
verrokkioperaatiot, joissa Java-ohjelma kutsuu suoraan Java-metodia ja
C-ohjelma C-funktiota. Toinen joukko testaa JNI-rajapinnan muita
palveluita kuten merkkijonojen ja taulukoiden käsittelyä.

Seuraavaksi havainnollistetaan ensimmäisen joukon kaikkia neljää
permutaatiota, jotka saadaan lähtösilmukoiden ja kutsukohteiden
toteutuskielistä: (Java \rightarrow C), (Java \rightarrow Java), (C
\rightarrow Java) sekä (C \rightarrow C). Aluksi käsitellään kutsu
Javasta C:hen.

#+NAME: fig:sequence_java_to_c
#+INCLUDE: ../../src/figures/sequence-java-to-c.puml" src plantuml :results file :file /tmp/sequence-java-to-c.png :exports results
#+ATTR_LATEX: :width {0.8\linewidth} :placement [t]
#+CAPTION: Javasta kutsutaan natiivikomponenttia
#+LABEL: fig:sequence_java_to_c
#+RESULTS: fig:sequence_java_to_c

Kuvan \ref{fig:sequence_java_to_c} sekvenssikaaviossa lähtösilmukka on
Java-komponentissa (metodissa
\path{J2CBenchmark00026.runInternal}). Lähtösilmukkaa toistettaessa
ylitetään hyvin monta kertaa JNI-rajapinta ja kutsutaan sen kautta
~libnativebenchmark~ -natiivikir\-jas\-tos\-sa olevaa metodia, jonka sisältö
on tyhjä. Näin ollen mittauksen kohde on käytännössä juuri JNI-kutsu.


#+NAME: fig:sequence_java_to_java
#+INCLUDE: ../../src/figures/sequence-java-to-java.puml" src plantuml :results file :file /tmp/sequence-java-to-java.png :exports results
#+ATTR_LATEX: :width {0.4\linewidth} :placement [t]
#+CAPTION: Javasta kutsutaan Java-metodia
#+LABEL: fig:sequence_java_to_java
#+RESULTS: fig:sequence_java_to_java

Kuvassa \ref{fig:sequence_java_to_java} nähdään yksinkertaisempi
asetelma, jossa Java-ohjelma kutsuu sisäisesti tavallista Java-metodia
ilman JNI-rajapintaa.  \path{JavaCounterparts}-luokka sisältää kaikki
tyhjät metodit, joita voidaan kutsua Java- tai C-lähtösilmukasta. Samaa
luokkaa hyödynnetään myös seuraavassa tapauksessa, jossa
C-lähtösilmukka kutsuu Java-tynkämetodia.

#+NAME: fig:sequence_c_to_java
#+INCLUDE: ../../src/figures/sequence-c-to-java.puml" src plantuml :results file :file /tmp/sequence-c-to-java.png :exports results
#+ATTR_LATEX: :width {0.8\linewidth} :placement [b]
#+CAPTION: Natiivikomponentista kutsutaan Java-metodia
#+LABEL: fig:sequence_c_to_java
#+RESULTS: fig:sequence_c_to_java

Kuvassa \ref{fig:sequence_c_to_java} JNI-rajapinta ylitetään kahdessa
kohtaa. Ensinnäkin, koska tällä kertaa lähtösilmukka on
natiivikoodissa (moduulin \path{nativerunners.c} funktiossa
\path{runInternal}), täytyy jo tätä fuktiota kutsua JNI:n
kautta. Varsinainen mittauskohde on kuitenkin natiivikoodin kutsuma
\path{(*env)->CallVoidMethod} -JNI-funktio, jota kautta kutsutaan
Java-komponentissa olevaa \path{JavaCounterparts}-luokan tyhjää
metodia. Molemmat kuvan Dalvik-virtuaalikoneet ovat sama instanssi,
joka on selkeyden vuoksi piirretty kaksi kertaa.

#+NAME: fig:sequence_c_to_c
#+INCLUDE: ../../src/figures/sequence-c-to-c.puml" src plantuml :results file :file /tmp/sequence-c-to-c.png :exports results
#+ATTR_LATEX: :width {0.8\linewidth} :placement [t]
#+CAPTION: Natiivikomponentista kutsutaan natiivikomponenttia
#+LABEL: fig:sequence_c_to_c
#+RESULTS: fig:sequence_c_to_c

Kuvan \ref{fig:sequence_c_to_c} tilanne on viimeinen permutaatio.
Siinä koko mitattava suoritus tapahtuu natiivikomponentissa.

* Mittauslaitteisto

Mittaukset suoritettiin Samsungin valmistamassa /Google Nexus
S/-puhelimessa, joka julkaistiin vuonna 2010. Puhelimessa on Androidin
versio 4.1.2. Perf-työkalun käytön mahdollistamiseksi puhelimeen
käännettiin uudelleen konfiguroitu Linuxin ydin, ja
Android-järjestelmän pakkauksiin otettiin mukaan perf-ohjelma sekä
uudelleen käännetyt versiot Dalvikista ja su-komennosta. Profilointi
vaatii myös profiloitavien komponenttien kuten Dalvikin
uudelleenkääntämistä erikseen määritellyllä kutsukonventiolla, jotta
perf-työkalu osaa tulkita aliohjelmakutsujen muodostamat ketjut oikein
kutsupinosta otetuista näytteistä. Muokattujen
järjestelmäkomponenttien asentaminen laitteeseen saattaa tehdä siitä
toimintakyvyttömän, joten riskin minimoimiseksi ja resurssisyistä
mittauksia ei toistettu viimeisimmillä laitteilla.

Mikään käytetyissä mittausmenetelmissä ei kuitenkaan estä mittausten
toistamista uusilla Android-laitteilla, mikä olisikin tulosten
toistettavuuden ja yleistettävyyden kannalta tärkeä seuraava
askel. Mittausojelmiston siirtäminen on helpointa Android Open Source
Projectin (AOSP) suoraan tukemiin kohdelaitteisiin kuten
/Nexus/-laitteisiin. Lisäominaisuudet, joita mittausohjelmisto
edellyttää Android-alustalta, on toteutettu suoraan muokkaamalla ja
konfiguroimalla AOSP:n julkaisemaa lähdekoodiversiota, ja AOSP:n
lähdekoodiversiot kääntyvät suoraan ilman lisätyötä vain tuetuille
laitteille. Avoimen lähdekoodien komponenttien lisäksi Android vaatii
nimittäin toimiakseen binäärimuotoisia laitteistokohtaisia kirjastoja,
jotka AOSP on julkaissut vain tuetuille laitteille suoraan osana
laitteistokohtaisia julkaisuversioita @@aosp-build-device. Samoin
tuettujen laitteistojen tarkat konfiguraatiot kääntämistä varten ovat
osa AOSP-lähdekoodia. Kääntäminen onnistuu kuitenkin mille tahansa
laitteelle, jonka binäärikirjastot ja käännöskonfiguraatiot ovat
saatavilla.

Oleellisin tutkielmassa avoimeksi jäävä kysymys on, miten Dalvikin
korvaava ART-virtuaalikonetoteutus muuttaa tuloksia. Sen takia
mittaukset olisi hyvä ajaa vähintään Android 5.0-järjestelmässä. Koska
JNI on standardoitu rajapinta, mittauskoodissa itsessään ei ole mitään
riippuvuuksia juuri Dalvikiin. Mittaussovelluksessa ei myöskään ole
merkittäviä riippuvuuksia käytettyyn Android-versioon. Suurin työ
mittausten kääntämiselle uudemmille alustaversioille onkin juuri
Linux-ytimen sekä Androidin käyttöjärjestelmäkomponenttien
uudelleenkonfigurointi tukemaan perf- työkalua.

** TODO lisää viitteet ja tarkista Android-versio, mieti lopullinen sivu :noexport:
   :PROPERTIES:
   :CUSTOM_ID: nexus-s-reference
   :END:
   https://en.wikipedia.org/wiki/Nexus_S
   lisää liite, jossa tarkat konfiguraatio-ohjeet?

   # https://en.wikipedia.org/wiki/Android_Runtime
   # Ainoa vaatimus on, että valittu laite 

# Mainitse BenchmarkParameter?

* Mittaamisen haasteita

Mittauksien käynnistämistä monimutkaistaa hieman se, että eri
\path{MeasuringTool}-mittaustyökalut suorittavat samat kohdeoperaatiot
eri tavoilla.

Yksinkertaisempi tapaus on vasteaikojen mittaus
\path{JavaSystemNanoResponseTimeRecorder}-luokassa: lähtösilmukkaa
suoritetaan yhteensä aina täsmälleen ennalta määrätyn
kierroslukumäärän verran.  \path{JavaSystemNanoResponseTimeRecorder}
ottaa talteen järjestelmän kellon arvon ennen kierrosten suoritusta ja
sen jälkeen.

Kutsuprofiilia luotaessa kaikkia lähtösilmukoita tulee sen sijaan
suorittaa niin kauan, että ~perf record~ -työkalu on saanut kerättyä
riittävän määrän näytteitä -- esimerkiksi 10 sekunnin ajan jokaista
benchmarkia kohden. Näin ollen lähtösilmukoita ajetaan, kunnes
mittaava komponentti \path{LinuxPerfRecordTool} keskeyttää
benchmark-säikeen suorituksen. Tämä monimutkaistaa lähtösilmukoita,
sillä niiden on itse tutkittava, onko mittaus keskeytetty, mutta
tehtävä se tarpeeksi harvoin, jotta se ei vaikuta suoritusaikoihin.

* Mittaamisen perusrasitteet

Eri permutaatioiden sekvenssikaavioista (kuvat
\ref{fig:sequence_java_to_c}--\ref{fig:sequence_c_to_c}) voi huomata,
että mitattava ohjelmakoodi vaihtelee sen mukaan, onko ~runInternal~
-metodi ja lähtösilmukka Java- vai natiivikomponentissa. Kun se on
Java-komponentissa, Dalvik ensin tulkitsee silmukkaa ja sitten
JIT-kääntää sen suorittaakseen kääntämäänsä versiota silmukasta. Kun
lähtösilmukka on natiivikomponentissa, C-kääntäjän tuottamaa
konekielistä versiota suoritetaan sellaisenaan.

Koska on mahdotonta kontrolloida, miten erilaisia kaksi eri versiota
lähtösilmukasta konekielitasolla ovat, ei niiden suoritusaikojakaan
periaatteessa voi suoraan vertailla. Lähtösilmukoiden erojen
mittaamiseksi molempien versioiden perusrasitetta arvioitiin
seuraavalla menetelmällä. Kummastakin lähtösilmukasta luotiin
benchmarksarjat, jossa suoraan silmukan sisälle lisätään /n/
kappaletta identtistä ohjelmalohkoa, jotka suorittavat hyödyttömiä
mutta tarpeeksi raskaita ja sivuvaikutuksellisia aritmeettisia
operaatioita paikallisilla muuttujilla. Kun /n/:n arvoa varioidaan
lineaarisesti, saaduista vasteajoista interpoloimalla voidaan
arvioida, mikä mittausmenetelmän pohjavasteaika on /n/:n arvolla 0
(tyhjä lähtösilmukka). Näin saadaan tarkempi arvio perusrasitteesta
kuin pelkästään ajamalla tyhjää lähtösilmukkaa -- erityisesti
Java-koodin tapauksessa Java- tai JIT-kääntäjä saattaa myös optimoida
pois tyhjän silmukan, jolla ei ole sivuvaikutuksia.

{{{plot(normaloverhead-c-fit)}}}

{{{plot(normaloverhead-j-fit)}}}

Perusrasitemittausten tulokset näkyvät C-kieliselle lähtösilmukalle
kuvassa \ref{fig:normaloverhead-c-fit} ja Java-kieliselle kuvassa
\ref{fig:normaloverhead-j-fit}.

Käytännön mittauksissa osoittautui kuitenkin, että ainakaan
Java-koodissa menetelmä ei toimi, sillä perusrasitteeksi
interpoloinnissa saadaan negatiivinen arvo. Vaatisi lisätutkimuksia
kehittää perusrasitemittauksista käyttökelpoisia. Ongelma saattaa
liittyä näissä mittauksissa käytettyihin epätyypillisiin
ohjelmalohkoihin, joiden käyttäytyminen JIT-käännöksen syötteenä ei
ole ennustettavaa.

# TODO two plots below: scale 50%

* Muistia allokoivat operaatiot

Muistia allokoivia JNI-operaatioita, jotka esimerkiksi luovat olioita,
ei voi suorittaa tuhansia kertoja ilman, että sovelluksen muisti
loppuu. Yleensä mittauksissa on pyritty pitämään kierrosmäärä niin
suurena kuin käytännössä on järkevää, jotta satunnaisten
järjestelmässä esiintyvien häiriöiden suuruus verrattuna mitattuihin
kokonaisvasteaikoihin olisi pieni. Allokoivissa operaatioissa silmukan
kierrosmäärä pidetään alhaisena, mutta vastaavasti samoja mittauksia
suoritetaan useampia ajoja ja saaduista luvuista otetaan keskiarvo.

# TODO tilastollisesti: miten ?

Javan tapauksessa väliaikaisten olioiden allokointi aiheuttaa lisäksi
roskienkeruuta ennakoimattomina ajankohtina. Mittauksissa
roskienkeruun aiheuttama sinänsä oleellinen rasite suorituskyvylle on
päätetty yksinkertaisuuden vuoksi jättää huomiotta. Roskienkeruuta
ehdotetaan virtuaalikoneelle ~System.gc()~ -kutsulla mittausajojen
ulkopuolella. Androidin lokien perusteella virtuaalikone myös näyttää
käytännössä ajavan roskienkeruun halutulla
ajoituksella. Mittaustuloksien mukaan lisätään ote Androidin
järjestelmälokista, mistä voidaan havaita mahdolliset häiriöitä
aiheuttavat roskienkeruutapahtumat.

Viimeinen ongelma allokoivissa operaatioissa on, että käynnistettäessä
Android-sovellukselle annetaan sallittua maksimikokoa pienempi keko,
jonka kasvattaminen tarpeen mukaan taas saattaa aiheuttaa
suorituskykyhäiriöitä. Ongelmaa on vältetty allokoimalla heti
sovelluksen käynnistyessä suuri taulukko-olio, johon saatu viite
tuhotaan heti roskienkeruun mahdollistamiseksi.

* JIT-käännös

Dalvik sisältää JIT-kääntäjän, jonka toiminta tekee Java-koodin
käyttäytymisestä vaikeasti ennustettavaa: koska mittauksessa
suoritetaan samaa silmukkaa jatkuvasti, on melko varmaa että se
JIT-käännetään jossain vaiheessa, mutta suorituksen aluksi silmukan
tavukoodia tulkitaan. Ongelma on ratkaistu suorittamalla ennen
varsinaisia mittauksia /lämmittelyajo/, jonka kierrosmäärä on arvioitu
riittäväksi JIT-kääntämisen laukaisemiseksi.

Oikean kierrosmäärän arvioimiseksi ja JIT-käännöksen havaitsemiseksi
tehtiin mittaus, jossa samaa benchmarkia suoritetaan pienehköllä
silmukkakierrosluvulla mutta monessa perättäisessä ajossa, ja
seurataan peräkkäisten vasteaikojen kehittymistä. Mittaustulokset
näkyvät kuvassa \ref{fig:warmup-plot}. Vaaka-akselilla näkyy
mittauskerta ja pystyakselilla vasteaika. Huomionarvoista on, että
tässä JIT-käännöksen tuloksena ollut ohjelma on /hitaampi/ kuin
tulkittu koodi. Tämä johtunee mittauksiin valitun ohjelmakoodin
epätyypillisyydestä.

# TODO: ref below above

\begin{figure}
    \input{figures/warmup-proof}
\caption{Vasteajan muuttuminen mittausten edetessä}\label{fig:warmup-plot}
\end{figure}

* Benchmark Generator

/Benchmark Generator/ on Python-kielinen ohjelma, joka tuottaa
/NativeBenchmark/-sovelluksen lähtösilmukat sekä kutsujen kohteena
olevat tynkämetodit. Ohjelma myös tulostaa C-kieliset moduulit sekä
Java-kieliset luokat, joihin kyseiset silmukat ja metodit sijoitetaan.

* TODO Tilastolliset menetelmät                                    :noexport:
  Tarvitaanko tätä?
  2 sivua\newline 10. 2. 2014
  
  # TODO: ei ole juurikaan käytetty muuta kuin interpolointia
  
  Käytetyt tilastolliset menetelmät.
