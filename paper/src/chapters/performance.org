
Riittävä suorituskyky on keskeinen laatuvaatimus mille tahansa
ohjelmistolle, mutta millä tavalla suorituskykyvaatimukset tulisi
ottaa huomioon ohjelmiston kehitysprosessissa? Ohjelmistotekniikan
kirjallisuudessa kysymykseen on vastattu hyvin eri tavoin.

Donald Knuthilta on peräisin tunnettu lainaus: "Ennenaikainen
optimointi on kaiken pahan alku ja juuri @@goto(268)." 
Käsitellessään *rakenteellisen* ohjelmoinnin periaatteita Knuth korostaa, ettei
# todo: mitä artikkeli itse asiassa käsittelee?
varsinaisessa ohjelmointityössä kannata käyttää aikaa suorituskykyä
parantaviin manuaalisiin optimointeihin ennen kuin ohjelman
suoritusaikaista käyttäytymistä on tutkittu ja löydetty ohjelman
osat, joiden suoritusaika on merkittävä osa ohjelman
kokonaissuoritusajasta.

Periaatteeseen on kaksi syytä. Ensinnäkin ohjelmoijan intuitio johtaa
yleensä harhaan, kun etsitään ohjelman suorituskyvyn kannalta
keskeisiä osia. Lisäksi käsityönä tehdyt optimoinnit tekevät
ohjelmakoodista vaikeammin ymmärrettävää ja ylläpidettävää, joten
niitä kannattaa välttää kaikkialla, missä niitä ei todistetusti
tarvita.

Knuthin tueksi voi nykynäkökulmasta todeta, että
laitteistoarkkitehtuurien, optimoivien kääntäjien, virtuaalikoneiden
ja suoritusympäristön yleisen monimutkaistumisen takia pelkästä
ohjelman lähdekoodista on yhä vaikeampaa suoraan päätellä ohjelman
suoritusaikaista käyttäytymistä @@vertical.

# TODO esimerkki lähteistä (java vertical profiling)
# lisää lähteitä?

Knuthin näkökulma rajottui kuitenkin yksittäisen algoritmin, ohjelman
tai komponentin /ohjelmointiin/. Laajempaa ohjelmistoa rakentaessa
otetaan kantaa myös ohjelmiston konseptuaalisiin vaatimuksiin ja
suunnitellaan ohjelmiston komponenttitason arkkitehtuuri sekä
komponenttien tarkempi rakenne. Oli ohjelmiston tuotantoprosessi miten
inkrementaalinen tahansa, monet varhaiset makrotason ratkaisut
rajoittavat myöhempiä mikrotason ratkaisuita. Merkittäviä
seurannaisvaikutuksia on esimerkiksi

- valituilla ohjelmointikielellä tai -kielillä,
- valmiiden komponenttien ja kirjastojen valinnalla,
- ohjelmiston yleisarkkitehtuurilla ja komponenttien sijoittumisesta
  suoritusympäristön eri osiin,
  
Kaikkia näitä valintoja voi toki periaatteessa muuttaa milloin
tahansa, mutta todellisten projektien rajoitusten takia se on usein
jälkikäteen mahdotonta.
  
# comment: lähde edelliseen?

Suorituskykyvaatimuksien täyttymistä ohjelmistoprosessin näkökulmasta
tavoitellaan /ohjelmistojen suorituskykytekniikan/ alalla (/Software
Performance Engineering/, /SPE/). Se on ohjelmistotekniikan osa-alue,
jossa suorituskykyvaatimukset kvantifioidaan ja otetaan huomioon
vaatimusanalyysistä lähtien aina ylläpitoon asti @@spe(1). Alan
kehittäjän Connie U. Smithin mukaan puutteelliset
suorituskykyominaisuudet ovat olleet keskeisessä osassa
epäonnistuneissa ohjelmistoprojekteissa, ja ne voitaisiin välttää
/mallintamalla/ ohjelmistoja suorituskykynäkökulmasta jo ennen
toteutusvaihetta.

* Suorituskyky

Suorituskyky on pohjimmiltaan subjektiivinen käsite, joka kertoo,
miten /hyvin/ ohjelmisto toteuttaa tehtävänsä @@ferrari(2). Tässä
tutkielmassa määritellään suorituskyky ohjelmiston laadulliseksi
ominaisuudeksi, joka kuvaa, miten /tehokkaasti/ ohjelmisto toimii
käyttäjän näkökulmasta: miten tyydyttävät sen vasteajat ovat ja miten
tehokkaasti se prosessoi syötedataa.

Jotta suorituskykyä voisi mallintaa ja mitata, sekä relevantit
suorituskykyvaatimukset että suorituskykyominaisuudet on analysoitava
kvantifikoitaviksi /mittaluvuiksi/ @@ferrari(12). Tällaiset mittaluvut
koskevat joko järjestelmän /tuottavuutta/, /responsiivisuutta/ tai
valitun ohjelmisto- tai laitteistoresurssin /käyttöastetta/
@@ferrari(12).

Tässä tutkielmassa käsitellään ensisijaisesti mobiilisovellusten
responsiivisuutta. Sitä arvioidaan mittaamalla vasteaikaa: aikaväliä
syötteen saamisesta siihen hetkeen kun ohjelman tai ohjelmakomponentin
tuloste on palautettu käyttäjälle tai kutsuvalle komponentille
@@ferrari(13). Vasteajan perussuure on siis aika, ja sitä voi mitata
ohjelmiston eri tasoilla yksittäisestä aliohjelmasta koko
ohjelmistoon.

Myös tuottavuutta käsitellään tutkielmassa sikäli kuin komponenttien
tuottavuus vaikuttaa vasteaikaan. Tuottavuus tarkoittaa
käsittelytehoa, jolla ohjelma suoriutuu esimerkiksi tietyn datamäärän
tai työkuorman käsittelystä, ja tuottavuusmittalukujen suure on
/kuorma aikayksikköä kohti/. Kuormalle ei ole aina löydettävissä
universaalia, laitteisto- tai sovellusalueriippumatonta mittayksikköä
@@ferrari(12).




#Näinkin rajattuna käsite on
#riippuvainen käyttäjän tarpeista ja siten ohjelmiston vaatimuksista
# @@todo(2--4).

#Tuottavuuteen liittyy
# todo 

# probleemi: subjektiivisuus vs. mitattavuus. tästä löytyy matskua. :)
# ferrari luku 5.2.3


